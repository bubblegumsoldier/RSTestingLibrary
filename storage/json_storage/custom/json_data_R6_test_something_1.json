{"MBSAutoInitializer": {"description": "MBSAutoInitializer(..)\r\n  Initialize MBS meshes.\r\n  Parameters:\r\n    MbsRois - The list of MBS models. Each item in this list \r\n      maps case type / model to ROI name and color.\r\n      If CreateNewRois is false, RoiName must refer to an existing \r\n      ROI and RoiColor is ignored.\r\n      Example: [{ 'CaseType': \"PelvicMale\", 'ModelName': \"Bladder\", \r\n      'RoiName': \"Bladder_MBS\", 'RoiColor': \"Yellow\" },\r\n                { 'CaseType': \"PelvicMale\", 'ModelName': \"Rectum\", \r\n      'RoiName': \"Rectum\", 'RoiColor': \"Brown\" }]\r\n    CreateNewRois - True if new ROIs should be created. If it \r\n      is false, each item in MbsRois must refer to an existing ROI.\r\n    Examination - The examination.\r\n    UseAtlasBasedInitialization - True if atlas based \r\n      initialization should be used.\r\n", "params": ["MbsRois", "CreateNewRois", "Examination", "UseAtlasBasedInitialization"], "type": "function"}, "GetAlgorithmSettingsForHybridDIR": {"description": "GetAlgorithmSettingsForHybridDIR(..)\r\n  Gets the hybrid deformable registration algorithm settings used \r\n  when running \"Create hybrid deformable registrations\" from UI.\r\n  The resulting HybridAlgorithmSettingsData dictionary can be used \r\n  as input parameter to the scriptable action \r\n  CreateHybridDeformableRegistrationGroup, either as is or modified.\r\n  Parameters:\r\n    ReferenceExaminationName - Name of the reference \r\n      examination.\r\n    TargetExaminationName - Name of the target examination.\r\n    FinalResolution - \r\n    DiscardImageInformation - If to discard image information.\r\n    UsesControllingROIs - If to use controlling ROIs.\r\n    DeformationStrategy - Name of the deformation strategy \r\n      (\"Default\" or \"InternalLung\")\r\n  Returns:\r\n    A HybridAlgorithmSettingsData object (dictionary with \r\n    settings name and value).\r\n", "params": ["ReferenceExaminationName", "TargetExaminationName", "FinalResolution", "DiscardImageInformation", "UsesControllingROIs", "DeformationStrategy"], "type": "function"}, "CreatePoi": {"description": "CreatePoi(..)\r\n  Create a new POI.\r\n  Parameters:\r\n    Examination - The examination on which the POI will be \r\n      defined. If Examination is null, Point and Volume will \r\n      disregarded.\r\n    Point - POI coordinates. Disregarded if Examination is null.\r\n    Volume - Volume of the point [cm^3]. Disregarded if \r\n      Examination is null.\r\n      In most cases a point has a zero volume, but if the point is \r\n      used to represent a detector for example, the volume can be \r\n      set to the volume of the detector.\r\n    Name - The name of the new POI.\r\n    Color - Display color of the POI. Use a color such as \r\n      'Red' or an ARGB value such as '#FFFF0000'.\r\n    Type - ROI type. Possible values;\r\n      * Marker: Patient marker or marker on a localizer.\r\n      * Isocenter: Treatment isocenter to be used for external beam \r\n      therapy.\r\n      * Registration.\r\n      * Control: To be used in control of dose optimization and \r\n      calculation.\r\n      * DoseRegion: To be used as a dose reference.\r\n      * LocalizationPoint: Laser coordinate system origin.\r\n      * AcquisitionIsocenter: Acquisition isocenter, the position \r\n      during acquisition.\r\n      * InitialLaserIsocenter: Initial laser isocenter, the position \r\n      before acquisition.\r\n      * InitialMatchIsocenter: Initial match isocenter, the position \r\n      after acquisition.\r\n      * Undefined.\r\n", "params": ["Examination", "Point", "Volume", "Name", "Color", "Type"], "type": "function"}, "CopyRoiGeometries": {"description": "CopyRoiGeometries(..)\r\n  Copies RoiGeometries between structure sets.\r\n  Parameters:\r\n    SourceExamination - The source examination.\r\n    TargetExaminationNames - List of target examination names.\r\n    RoiNames - List of ROI names.\r\n", "params": ["SourceExamination", "TargetExaminationNames", "RoiNames"], "type": "function"}, "PointsOfInterest": [{"SetMarginExpression": {"description": "SetMarginExpression(..)\r\n  Sets a derived ROI expression representing a margin \r\n  (expansion/contraction). Should be followed by \r\n  UpdateDerivedGeometry in order to create the geometry for a \r\n  specific examination.\r\n  Parameters:\r\n    SourceRoiName - The name of the source region of interest.\r\n    MarginSettings - The margin settings. Defines type (Expand \r\n      or Contract) and distances. All distances must be positive and \r\n      less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n", "params": ["SourceRoiName", "MarginSettings"], "type": "function"}, "GrayLevelThreshold": {"description": "GrayLevelThreshold(..)\r\n  Gray level thresholding.\r\n  Parameters:\r\n    Examination - The examination.\r\n    LowThreshold - The low threshold. The unit is in rescaled \r\n      pixel values, e.g. HU for CT. For PET images, PetUnit must be \r\n      specified.\r\n    HighThreshold - The high threshold. The unit is in \r\n      rescaled pixel values, e.g., HU for CT. For PET images, \r\n      PetUnit must be specified.\r\n    PetUnit - The unit for PET images. Common values:\r\n      * Bq/ml (activity concentration)\r\n      * g/ml (SUV)\r\n    BoundingBox - The bounding box. If specified, only pixels \r\n      located inside the bounding box are thresholded, pixels \r\n      outside are ignored. If not specified the whole image set is \r\n      thresholded. The bounding box is defined by the minimum and \r\n      maximum corners, MinCorner and MaxCorner.\r\n      Example:\r\n         To consider the bounding box defined by the points (x_min, \r\n      y_min, z_min) and (x_max, y_max, z_max), set \r\n      BoundingBox={\"MinCorner\":{'x':x_min, 'y':y_min, 'z':z_min}, \r\n      'MaxCorner':{'x':x_max, 'y':y_max, 'z':z_max}}\r\n", "params": ["Examination", "LowThreshold", "HighThreshold", "PetUnit", "BoundingBox"], "type": "function"}, "CreateCylinderGeometry": {"description": "CreateCylinderGeometry(..)\r\n  Create a cylinder geometry for the current ROI.\r\n  Parameters:\r\n    Radius - The radius (cm) of the cylinder geometry.\r\n    Axis - The axis (cm) of the cylinder geometry in the DICOM \r\n      patient-based coordinate system.\r\n    Length - The length (cm) of the cylinder geometry along \r\n      Axis.\r\n    Examination - The examination where the geometry is created.\r\n    Center - The center coordinate (cm) of the geometry in the \r\n      DICOM patient-based coordinate system.\r\n    VoxelSize - The desired uniform voxel size (cm). Must be \r\n      between 0.01 and 1.0 cm. The default value is None which means \r\n      that a size dependent default voxel size is used. \r\n      Note that a explicitly setting a small voxel size for large \r\n      objects may lead to performance problems due to memory \r\n      limitations.\r\n", "params": ["Radius", "Axis", "Length", "Examination", "Center", "VoxelSize"], "type": "function"}, "AdaptMbsMesh": {"description": "AdaptMbsMesh(..)\r\n  Adapts an MBS mesh to the specified examination.\r\n  Parameters:\r\n    Examination - The examination.\r\n    CustomStatistics - Custom graylevel statistics.\r\n    CustomSettings - Custom MBS settings.\r\n", "params": ["Examination", "CustomStatistics", "CustomSettings"], "type": "function"}, "SetAsExternal": {"description": "SetAsExternal()\r\n  Sets this region of interest as the external ROI. If an external \r\n  ROI already exists, it will be replaced by this one.\r\n", "params": [], "type": "function"}, "CreateExternalGeometries": {"description": "CreateExternalGeometries(..)\r\n  Creates external geometries for the ROI on the specified \r\n  examinations.\r\n  Parameters:\r\n    ReferenceExamination - The reference examination.\r\n    AdditionalExaminationNames - The additional examination \r\n      names.\r\n    ReferenceThresholdLevel - The threshold level that \r\n      determines the outline. Set to None in order to automatically \r\n      calculate threshold value.\r\n      This threshold level is used for all additional examinations \r\n      of same modality.\r\n", "params": ["ReferenceExamination", "AdditionalExaminationNames", "ReferenceThresholdLevel"], "type": "function"}, "CreateMarginGeometry": {"description": "CreateMarginGeometry(..)\r\n  Creates a margin geometry (expansion/contraction).\r\n  Parameters:\r\n    Examination - The examination.\r\n    SourceRoiName - The name of the source region of interest.\r\n    MarginSettings - The margin settings. Defines type (Expand \r\n      or Contract) and distances. All distances must be positive and \r\n      less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n", "params": ["Examination", "SourceRoiName", "MarginSettings"], "type": "function"}, "RoiMaterial": null, "OrganData": null, "Color": {"B": 0, "A": 255, "G": 255, "R": 255}, "CreateControllingRoiGeometry": {"description": "CreateControllingRoiGeometry(..)\r\n  Creates controlling ROI geometry for a ROI geometry on a target \r\n  examination using a controlling ROI geometry on a reference \r\n  examination\r\n  Parameters:\r\n    ReferenceExaminationName - The name of the examination on \r\n      which the controlling ROI has a geometry defined.\r\n    TargetExaminationNames - The names of the examinations on \r\n      which to create a controlling ROI geometry.\r\n    RoiGeometryName - The name of the ROI geometry which the \r\n      controlling ROI should adapt to.\r\n    SmoothingRadius - Applies a morphological close and open \r\n      with a structuring element of the given radius \r\n      (in cm) before creating / adapting the triangle mesh. If set \r\n      to 0, no smoothing will be done.\r\n", "params": ["ReferenceExaminationName", "TargetExaminationNames", "RoiGeometryName", "SmoothingRadius"], "type": "function"}, "SetRoiMaterial": {"description": "SetRoiMaterial(..)\r\n  Assigns a new material to this ROI. The material density will \r\n  override the ROI density for dose computation on all image sets.\r\n  Parameters:\r\n    Material - The new material.\r\n", "params": ["Material"], "type": "function"}, "ExcludeFromExport": false, "__RayStation_ID": "-2147241215, 'loc'", "TransformROI3D": {"description": "TransformROI3D(..)\r\n  Performs a 3D transformation of the ROI\r\n  Parameters:\r\n    Examination - The examination where the geometry is \r\n      transformed\r\n    TransformationMatrix - The transformation matrix\r\n      Example:\r\n        Move the geometry 1 cm in every direction\r\n        TransformationMatrix = {'M11':1, 'M12':0, 'M13':0, 'M14':1,\r\n                                'M21':0, 'M22':1, 'M23':0, 'M24':1,\r\n                                'M31':0, 'M32':0, 'M33':1, 'M34':1,\r\n                                'M41':0, 'M42':0, 'M43':0, 'M44':1}\r\n                  \r\n      The scaling of the transformation matrix must be positive\r\n      The last row of the transformation matrix must be the \r\n      following: 'M41':0, 'M42':0, 'M43':0, 'M44':1\r\n", "params": ["Examination", "TransformationMatrix"], "type": "function"}, "DerivedRoiExpression": null, "DeleteRoi": {"description": "DeleteRoi()\r\n  Action for deleting an ROI.\r\n", "params": [], "type": "function"}, "VolumeThreshold": {"description": "VolumeThreshold(..)\r\n  Threshold ROI geometry based on volume, i.e., keep components of \r\n  input ROI geometry having volume in interval [MinVolume, \r\n  MaxVolume] cm3.\r\n  Typically used to clean up after a gray-level thresholding or \r\n  region-growing operation.\r\n  Parameters:\r\n    InputRoi - The input ROI.\r\n    Examination - The examination.\r\n    MinVolume - The minimum volume (cm3).\r\n    MaxVolume - The maximum volume (cm3).\r\n", "params": ["InputRoi", "Examination", "MinVolume", "MaxVolume"], "type": "function"}, "MultiSpectralThreshold": {"description": "MultiSpectralThreshold(..)\r\n  Multispectral thresholding of examinations in a MR protocol \r\n  group. \r\n  For each examination, LowThreshold and HighThreshold should be \r\n  given. \r\n  The resulting segmented region will consist of points which are in \r\n  the given (examination specific) range for each examination.\r\n  RoiGeometries will be created on each examination.\r\n  Parameters:\r\n    ExaminationNames - The examination names. All selected \r\n      examinations need to be in the same MR protocol group\r\n    LowThresholds - The low thresholds - one for each of the \r\n      selected examinations\r\n    HighThresholds - The high thresholds - one for each of the \r\n      selected examinations\r\n", "params": ["ExaminationNames", "LowThresholds", "HighThresholds"], "type": "function"}, "CreateBoxGeometry": {"description": "CreateBoxGeometry(..)\r\n  Create a box geometry for the current ROI.\r\n  Parameters:\r\n    Size - The size (cm) of the box geometry in the DICOM \r\n      patient-based coordinate system.\r\n    Examination - The examination where the geometry is created.\r\n    Center - The center coordinate (cm) of the geometry in the \r\n      DICOM patient-based coordinate system.\r\n    VoxelSize - The desired uniform voxel size (cm). Must be \r\n      between 0.01 and 1.0 cm. The default value is None which means \r\n      that a size dependent default voxel size is used. \r\n      Note that a explicitly setting a small voxel size for large \r\n      objects may lead to performance problems due to memory \r\n      limitations.\r\n", "params": ["Size", "Examination", "Center", "VoxelSize"], "type": "function"}, "CreateExternalGeometry": {"description": "CreateExternalGeometry(..)\r\n  Creates an external geometry for the ROI on the specified \r\n  examination.\r\n  Parameters:\r\n    Examination - The examination.\r\n    ThresholdLevel - The threshold level that determines the \r\n      outline. Set to None in order to automatically calculate \r\n      threshold value.\r\n", "params": ["Examination", "ThresholdLevel"], "type": "function"}, "BoneSegmentationByRegionGrowing": {"description": "BoneSegmentationByRegionGrowing(..) \r\n  --> No documentation found.\r\n", "params": [], "type": "function"}, "SetAlgebraExpression": {"description": "SetAlgebraExpression(..)\r\n  Sets a derived ROI algebra expression. The expression is defined \r\n  with two expressions, ExpressionA and ExpressionB, and the \r\n  combination of these. Should be followed by UpdateDerivedGeometry \r\n  in order to create the geometry for a specific examination.\r\n  Parameters:\r\n    ExpressionA - Expression A. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionA = { 'Operation': \"Union\", 'SourceRoiNames': \r\n      [\"Roi A\", \"Roi B\"], 'MarginSettings': { 'Type': \"Expand\", \r\n      'Superior': 1, 'Inferior': 1, 'Anterior': 1, 'Posterior': 1, \r\n      'Right': 1, 'Left': 1 } }\r\n    ExpressionB - Expression B. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionB = { 'Operation': \"Intersection\", \r\n      'SourceRoiNames': [\"Bladder\", \"Prostate\"], 'MarginSettings': { \r\n      'Type': \"Contract\", 'Superior': 0, 'Inferior': 0, 'Anterior': \r\n      0, 'Posterior': 0, 'Right': 1, 'Left': 0 } }\r\n    ResultOperation - The final operation to apply between \r\n      ExpressionA and ExpressionB. If it is None, Expression B is \r\n      not used.\r\n      Values:\r\n        * None\r\n        * Union\r\n        * Intersection\r\n        * Subtraction\r\n    ResultMarginSettings - The margin settings to apply to the \r\n      result. Defines type (Expand or Contract) and distances. All \r\n      distances must be positive and less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n", "params": ["ExpressionA", "ExpressionB", "ResultOperation", "ResultMarginSettings"], "type": "function"}, "SetWallExpression": {"description": "SetWallExpression(..)\r\n  Sets a derived expression representing a wall geometry. Should \r\n  be followed by UpdateDerivedGeometry in order to create the \r\n  geometry for a specific examination.\r\n  Parameters:\r\n    SourceRoiName - The name of the source region of interest.\r\n    OutwardDistance - The outward distance, must be positive \r\n      and less than 5 cm.\r\n    InwardDistance - The inward distance, must be positive and \r\n      less than 5 cm.\r\n", "params": ["SourceRoiName", "OutwardDistance", "InwardDistance"], "type": "function"}, "ElasticityParameters": null, "Name": "loc", "CreateSphereGeometry": {"description": "CreateSphereGeometry(..)\r\n  Create a sphere geometry for the current ROI.\r\n  Parameters:\r\n    Radius - The radius (cm) of the sphere geometry.\r\n    Examination - The examination where the geometry is created.\r\n    Center - The center coordinate (cm) of the geometry in the \r\n      DICOM patient-based coordinate system.\r\n    VoxelSize - The desired uniform voxel size (cm). Must be \r\n      between 0.01 and 1.0 cm. The default value is None which means \r\n      that a size dependent default voxel size is used. \r\n      Note that a explicitly setting a small voxel size for large \r\n      objects may lead to performance problems due to memory \r\n      limitations.\r\n", "params": ["Radius", "Examination", "Center", "VoxelSize"], "type": "function"}, "UpdateDerivedGeometry": {"description": "UpdateDerivedGeometry(..)\r\n  Updates the derived geometry for the specified examination.\r\n  Parameters:\r\n    Examination - The examination.\r\n    Algorithm - Defines if the logical set operations use \r\n      contour or voxel based methods. \r\n      Margins (expand/contract) and Wall operations are always \r\n      performed using voxel based methods.\r\n                  \r\n      Possible values:\r\n      * Auto: Automatically select algorithm mode.\r\n      * Contours: Use contour based methods.\r\n      * Voxels: Use voxel based methods.\r\n      Default value is \"Auto\".\r\n", "params": ["Examination", "Algorithm"], "type": "function"}, "Type": "LocalizationPoint", "CreateFieldOfViewROI": {"description": "CreateFieldOfViewROI(..)\r\n  Creates field-of-view ROI on a CBCT or CT image\r\n  Parameters:\r\n    ExaminationName - The name of the examination on which a \r\n      field-of-view ROI geometry will be created.\r\n", "params": ["ExaminationName"], "type": "function"}, "DeleteExpression": {"description": "DeleteExpression()\r\n  Deletes the derived ROI expression.\r\n", "params": [], "type": "function"}, "CreateRoiGeometryFromDose": {"description": "CreateRoiGeometryFromDose(..) \r\n  --> No documentation found.\r\n", "params": [], "type": "function"}, "RoiNumber": 19, "CreateITV": {"description": "CreateITV(..)\r\n  Creates an ITV ROI from the geometries of a source ROI in \r\n  several examinations. \r\n  The ITV geometry is the union of the geometries in the source ROI, \r\n  with margins applied as a final step.\r\n  Parameters:\r\n    SourceRegionOfInterest - The source ROI, which must have \r\n      geometry in all provided examinations.\r\n    ExaminationNames - List of examinations by name. These \r\n      examinations must be in the same 4D examination group.\r\n    MarginSettingsData - Margins applied to the union of the \r\n      geometries of the source ROI in the provided examinations.\r\n", "params": ["SourceRegionOfInterest", "ExaminationNames", "MarginSettingsData"], "type": "function"}, "CreateDirectionalMarginGeometry": {"description": "CreateDirectionalMarginGeometry(..)\r\n  Creates a beam specific margin ROI geometry by expansion in \r\n  distal, proximal and lateral directions relative either to the \r\n  chosen beam or to the chosen manual direction.\r\n  - Note that there is no dependency between the resulting margin \r\n  ROI geometry and the source ROI geometry or the selected beam.\r\n    If any of those are changed, the margin ROI geometry becomes \r\n  obsolete and must be regenerated.\r\n  - Note that the margin distances are geometrical, not radiological.\r\n  Parameters:\r\n    Examination - The examination.\r\n    SourceRoiName - The name of the source ROI.\r\n    Beam - A beam defining the direction. Must be defined if \r\n      Direction is undefined.\r\n    Direction - The direction in DICOM patient coordinates. \r\n      Must be defined if Beam is undefined.\r\n    DistalDistance - The distal distance in cm.\r\n    ProximalDistance - The proximal distance in cm.\r\n    LateralDistance - The lateral distance in cm.\r\n", "params": ["Examination", "SourceRoiName", "Beam", "Direction", "DistalDistance", "ProximalDistance", "LateralDistance"], "type": "function"}, "CreateAlgebraGeometry": {"description": "CreateAlgebraGeometry(..)\r\n  Creates an algebra geometry.\r\n  Parameters:\r\n    Examination - The examination.\r\n    Algorithm - Defines if the logical set operations use \r\n      contour or voxel based methods. \r\n      Margins (expand/contract) and Wall operations are always \r\n      performed using voxel based methods.\r\n                  \r\n      Possible values:\r\n      * Auto: Automatically select algorithm mode.\r\n      * Contours: Use contour based methods.\r\n      * Voxels: Use voxel based methods.\r\n      Default value is \"Auto\".\r\n    ExpressionA - Expression A. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionA = { 'Operation': \"Union\", 'SourceRoiNames': \r\n      [\"Roi A\", \"Roi B\"], 'MarginSettings': { 'Type': \"Expand\", \r\n      'Superior': 1, 'Inferior': 1, 'Anterior': 1, 'Posterior': 1, \r\n      'Right': 1, 'Left': 1 } }\r\n    ExpressionB - Expression B. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionB = { 'Operation': \"Intersection\", \r\n      'SourceRoiNames': [\"Bladder\", \"Prostate\"], 'MarginSettings': { \r\n      'Type': \"Contract\", 'Superior': 0, 'Inferior': 0, 'Anterior': \r\n      0, 'Posterior': 0, 'Right': 1, 'Left': 0 } }\r\n    ResultOperation - The final operation to apply between \r\n      ExpressionA and ExpressionB. If it is None, Expression B is \r\n      not used.\r\n      Values:\r\n        * None\r\n        * Union\r\n        * Intersection\r\n        * Subtraction\r\n    ResultMarginSettings - The margin settings to apply to the \r\n      result. Defines type (Expand or Contract) and distances. All \r\n      distances must be positive and less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n", "params": ["Examination", "Algorithm", "ExpressionA", "ExpressionB", "ResultOperation", "ResultMarginSettings"], "type": "function"}, "CreateWallGeometry": {"description": "CreateWallGeometry(..)\r\n  Creates a wall geometry.\r\n  Parameters:\r\n    Examination - The examination.\r\n    SourceRoiName - The name of the source region of interest.\r\n    OutwardDistance - The outward distance, must be positive \r\n      and less than 5 cm.\r\n    InwardDistance - The inward distance, must be positive and \r\n      less than 5 cm.\r\n", "params": ["Examination", "SourceRoiName", "OutwardDistance", "InwardDistance"], "type": "function"}}], "AutoBreastAtlas": {"description": "AutoBreastAtlas(..)\r\n  For auto breast planning only.\r\n  Create aHEART, aRTLUNG, aLTLUNG from a structure template atlas, \r\n  unless they already exist.\r\n  Parameters:\r\n    PatientModelTemplate - Name of the atlas for lung and heart.\r\n    Examination - Name of the examination.\r\n", "params": ["PatientModelTemplate", "Examination"], "type": "function"}, "__RayStation_ID": "-2147383275", "CreateRoi": {"description": "CreateRoi(..)\r\n  Create a new ROI.\r\n  Parameters:\r\n    Name - The name of the new ROI.\r\n    Color - Display color of the ROI. Use a color such as \r\n      'Red' or an ARGB value such as '#FFFF0000'.\r\n    Type - ROI type. Possible values;\r\n      * External: External patient contour.\r\n      * Ptv: Planning target volume (as defined in ICRU50).\r\n      * Ctv: Clinical target volume (as defined in ICRU50).\r\n      * Gtv: Gross tumor volume (as defined in ICRU50).\r\n      * TreatedVolume: Treated volume (as defined in ICRU50).\r\n      * IrradiatedVolume: Irradiated Volume (as defined in ICRU50).\r\n      * Bolus: Patient bolus to be used for external beam therapy.\r\n      * Avoidance: Region in which dose is to be minimized.\r\n      * Organ: Patient organ.\r\n      * Marker: Patient marker or marker on a localizer.\r\n      * Registration: Registration ROI\r\n      * Isocenter: Treatment isocenter to be used for external beam \r\n      therapy.\r\n      * ContrastAgent: Volume into which a contrast agent has been \r\n      injected.\r\n      * Cavity: Patient anatomical cavity.\r\n      * BrachyChannel: Branchy therapy channel\r\n      * BrachyAccessory: Brachy therapy accessory device.\r\n      * BrachySourceApplicator: Brachy therapy source applicator.\r\n      * BrachyChannelShield: Brachy therapy channel shield.\r\n      * Support: External patient support device.\r\n      * Fixation: External patient fixation or immobilisation device.\r\n      * DoseRegion: ROI to be used as a dose reference.\r\n      * Control: ROI to be used in control of dose optimization and \r\n      calculation.\r\n      * FieldOfView: ROI to be used for representing the \r\n      Field-of-view in, e.g., a cone beam CT image.\r\n      * AcquisitionIsocenter: Acquisition isocenter, the position \r\n      during acquisition.\r\n      * InitialLaserIsocenter: Initial laser isocenter, the position \r\n      before acquisition.\r\n      * InitialMatchIsocenter: Initial match isocenter, the position \r\n      after acquisition.\r\n      * Undefined.\r\n    TissueName - Name of the organ tissue. Optional.\r\n    RbeCellTypeName - Name of the organ RBE cell type. Optional.\r\n    RoiMaterial - Material that overrides ROI density. Optional.\r\n", "params": ["Name", "Color", "Type", "TissueName", "RbeCellTypeName", "RoiMaterial"], "type": "function"}, "CreateStructuresFromAtlas": {"description": "CreateStructuresFromAtlas(..)\r\n  Create structures from template using atlas-based initialization.\r\n  Parameters:\r\n    SourceTemplateName - The source template name.\r\n    SourceExaminationsNames - List of source (template) \r\n      examination names.\r\n    SourceRoiNames - List of source (template) ROIs.\r\n    SourcePoiNames - List of source (template) POIs.\r\n    AssociateStructuresByName - Sets whether to associate \r\n      structures by name. \r\n      - If false, target structures with the same name as template \r\n      structures will be duplicated, \r\n        i.e., a new ROI or POI will be created and a suffix will be \r\n      added to the name.\r\n      - If true, target structures that are empty will be populated. \r\n      Non-empty target structures will be disregarded.\r\n      The default value is true.\r\n    TargetExamination - The target examination.\r\n    UseMultiAtlas - \r\n    RigidInitializationVoxelSize - Voxel size used for \r\n      initialization of atlases images in rigid registration step.\r\n", "params": ["SourceTemplateName", "SourceExaminationsNames", "SourceRoiNames", "SourcePoiNames", "AssociateStructuresByName", "TargetExamination", "UseMultiAtlas", "RigidInitializationVoxelSize"], "type": "function"}, "DetectBreastMarkers": {"description": "DetectBreastMarkers(..)\r\n  For auto breast planning only.\r\n  Detect the SUP, INF, MED, LAT and ANT markers, and create external \r\n  ROI.\r\n  Parameters:\r\n    Examination - The name of the examination.\r\n    SUPName - Superior POI.\r\n    INFName - Inferior POI.\r\n    MEDName - Medial POI.\r\n    LATName - Lateral POI.\r\n    ANTName - Anterior POI.\r\n    ExternalName - External ROI.\r\n", "params": ["Examination", "SUPName", "INFName", "MEDName", "LATName", "ANTName", "ExternalName"], "type": "function"}, "CreateMaterial": {"description": "CreateMaterial(..)\r\n  Action for creating a new material based on another material. \r\n  Elemental atomic numbers, elemental masses, elemental weights and \r\n  mean excitation energy will be copied from the other material, \r\n  only density can be set.\r\n  Parameters:\r\n    BaseOnMaterial - The original material.\r\n    Name - Name must be unique, not consist of more than 16 \r\n      characters, not be empty and not only consist of whitespaces.\r\n    MassDensityOverride - The density of the new material.\r\n", "params": ["BaseOnMaterial", "Name", "MassDensityOverride"], "type": "function"}, "CreateHybridDeformableRegistrationGroup": {"description": "CreateHybridDeformableRegistrationGroup(..)\r\n  Creates a deformable registration group with hybrid deformable \r\n  registrations for the selected reference examination and target \r\n  examinations.\r\n  Parameters:\r\n    RegistrationGroupName - A registration group with this \r\n      name is created.\r\n    ReferenceExaminationName - The examination where the \r\n      deformation field is defined.\r\n    TargetExaminationNames - The examinations the deformation \r\n      fields will point to.\r\n    ControllingRoiNames - The list with ROI names for the \r\n      controlling ROIs.\r\n    ControllingPoiNames - The list with POI names for the \r\n      controlling POIs.\r\n    FocusRoiNames - The list with ROI names for the focus ROIs.\r\n    AlgorithmSettings - The algorithm settings.\r\n                  \r\n      Properties:\r\n                  \r\n        * NumberOfResolutionLevels\r\n          The number of resolution levels.\r\n        * InitialResolution\r\n          The deformation grid resolution (cm) at the initial \r\n      resolution level given in the DICOM patient-based coordinate \r\n      system. \r\n          Typical value (0.5, 0.5, 0.5).\r\n        * FinalResolution\r\n          The deformation grid resolution (cm) at the final \r\n      resolution level given in the DICOM patient-based coordinate \r\n      system. \r\n          Typical value (0.25, 0.25, 0.25).\r\n        * InitialGaussianSmoothingSigma\r\n          The Gaussian smoothing sigma at the initial resolution \r\n      level. Typical value 2.0.\r\n        * FinalGaussianSmoothingSigma\r\n          The Gaussian smoothing sigma at the final resolution \r\n      level. Typical value 0.333.\r\n        * InitialGridRegularizationWeight\r\n          The grid regularization weight at the initial resolution \r\n      level. Typical value 1500.0.\r\n        * FinalGridRegularizationWeight\r\n          The grid regularization weight at the final resolution \r\n      level. Typical value 400.0.\r\n        * ControllingRoiWeight\r\n          The controlling ROI weight. Typical value 0.5.\r\n        * ControllingPoiWeight\r\n          The controlling POI weight. Typical value 0.1.\r\n        * MaxNumberOfIterationsPerResolutionLevel\r\n          The maximum number of iterations per resolution level. \r\n      Typical value 1000.\r\n        * ImageSimilarityMeasure\r\n          The image similarity measure. Possible values: \r\n      \"CorrelationCoefficient\", \"MutualInformation\", \r\n      \"MixedCorrelationMutual\", \"None\".\r\n        * DeformationStrategy. Possible values: \"Default\", \r\n      \"InternalLung\".\r\n        * ConvergenceTolerance\r\n          The tolerance for convergence. Typical value 1e-5.\r\n      Example: \r\n                  \r\n        AlgorithmSettings = \r\n        {\r\n          'NumberOfResolutionLevels': 3,\r\n          'InitialResolution': { 'x': 0.5, 'y': 0.5, 'z': 0.5 },\r\n          'FinalResolution': { 'x': 0.25, 'y': 0.25, 'z': 0.25 },\r\n          'InitialGaussianSmoothingSigma': 2.0,\r\n          'FinalGaussianSmoothingSigma': 0.333,\r\n          'InitialGridRegularizationWeight': 1500.0,\r\n          'FinalGridRegularizationWeight': 400.0,\r\n          'ControllingRoiWeight': 0.5,\r\n          'ControllingPoiWeight': 0.1,\r\n          'MaxNumberOfIterationsPerResolutionLevel': 1000, \r\n          'ImageSimilarityMeasure': \"CorrelationCoefficient\",\r\n          'DeformationStrategy': \"DeformationStrategy\",\r\n          'ConvergenceTolerance': 1e-5\r\n        }\r\n", "params": ["RegistrationGroupName", "ReferenceExaminationName", "TargetExaminationNames", "ControllingRoiNames", "ControllingPoiNames", "FocusRoiNames", "AlgorithmSettings"], "type": "function"}, "CreateControllingRoiGeometries": {"description": "CreateControllingRoiGeometries(..)\r\n  Creates controlling ROI geometries for reference and target \r\n  examinations.\r\n  Parameters:\r\n    ReferenceExaminationName - The name of the examination for \r\n      which to create the controlling roi meshes.\r\n    TargetExaminationNames - The names of the examinations on \r\n      which to create controlling roi geometries based on the meshes \r\n      created on the reference examination.\r\n    RoiGeometryNames - The name of the roi geometry which the \r\n      controlling roi should adapt to.\r\n    SmoothingRadius - Applies a morphological close and open \r\n      with a structuring element of the given radius \r\n      (in cm) before creating / adapting the triangle mesh. If set \r\n      to 0, no smoothing will be done\r\n    DesiredTriangleEdgeLength - Desired edge length (in cm) \r\n      for the triangles in the mesh created on the reference \r\n      examination.\r\n      Voxel size 0.1 x 0.1 x 0.1 will be used and a typical value \r\n      for DesiredTriangleEdgeLength is 0.3\r\n    CreateNewRois - If true, the controlling roi meshes will \r\n      be placed in a new roi.\r\n      If false, the controlling roi meshes will overwrite existing \r\n      roi geometries.\r\n", "params": ["ReferenceExaminationName", "TargetExaminationNames", "RoiGeometryNames", "SmoothingRadius", "DesiredTriangleEdgeLength", "CreateNewRois"], "type": "function"}, "AdaptMbsMeshes": {"description": "AdaptMbsMeshes(..)\r\n  Adapts MBS meshes to the specified examination.\r\n  Parameters:\r\n    Examination - The examination.\r\n    RoiNames - The ROI names.\r\n    CustomStatistics - Lookup table for custom image region \r\n      statistics per ROI.\r\n    CustomSettings - Lookup table for custom settings per ROI.\r\n", "params": ["Examination", "RoiNames", "CustomStatistics", "CustomSettings"], "type": "function"}, "Materials": [{"MaterialId": "69f2912a-4e86-4c8a-a130-74d02014c044", "CTMapping": false, "IsFactorySetting": false, "Name": "Carbon fiber", "__RayStation_ID": "-2147383226", "MeanExcitationEnergy": 78.0, "ElementalWeights": [1.0], "ElementalMasses": [12.0107], "MassDensity": 1.7, "ElementalAtomicNumbers": [6.0]}], "CreateBiomechanicalDeformableRegistrationGroup": {"description": "CreateBiomechanicalDeformableRegistrationGroup(..)\r\n  Creates a deformable registration group with biomechanical \r\n  deformable registrations for the selected reference examination \r\n  and target examinations.\r\n  Parameters:\r\n    RegistrationGroupName - A registration group with this \r\n      name is created.\r\n    ReferenceExaminationName - The examination where the \r\n      deformation field is defined.\r\n    TargetExaminationNames - The examinations the deformation \r\n      fields will point to.\r\n    ControllingRois - The list with controlling ROIs.\r\n    DeformationGridVoxelSize - The deformation grid voxel size \r\n      in the DICOM patient-based coordinate system.\r\n", "params": ["RegistrationGroupName", "ReferenceExaminationName", "TargetExaminationNames", "ControllingRois", "DeformationGridVoxelSize"], "type": "function"}, "RegionsOfInterest": [{"SetMarginExpression": {"description": "SetMarginExpression(..)\r\n  Sets a derived ROI expression representing a margin \r\n  (expansion/contraction). Should be followed by \r\n  UpdateDerivedGeometry in order to create the geometry for a \r\n  specific examination.\r\n  Parameters:\r\n    SourceRoiName - The name of the source region of interest.\r\n    MarginSettings - The margin settings. Defines type (Expand \r\n      or Contract) and distances. All distances must be positive and \r\n      less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n", "params": ["SourceRoiName", "MarginSettings"], "type": "function"}, "GrayLevelThreshold": {"description": "GrayLevelThreshold(..)\r\n  Gray level thresholding.\r\n  Parameters:\r\n    Examination - The examination.\r\n    LowThreshold - The low threshold. The unit is in rescaled \r\n      pixel values, e.g. HU for CT. For PET images, PetUnit must be \r\n      specified.\r\n    HighThreshold - The high threshold. The unit is in \r\n      rescaled pixel values, e.g., HU for CT. For PET images, \r\n      PetUnit must be specified.\r\n    PetUnit - The unit for PET images. Common values:\r\n      * Bq/ml (activity concentration)\r\n      * g/ml (SUV)\r\n    BoundingBox - The bounding box. If specified, only pixels \r\n      located inside the bounding box are thresholded, pixels \r\n      outside are ignored. If not specified the whole image set is \r\n      thresholded. The bounding box is defined by the minimum and \r\n      maximum corners, MinCorner and MaxCorner.\r\n      Example:\r\n         To consider the bounding box defined by the points (x_min, \r\n      y_min, z_min) and (x_max, y_max, z_max), set \r\n      BoundingBox={\"MinCorner\":{'x':x_min, 'y':y_min, 'z':z_min}, \r\n      'MaxCorner':{'x':x_max, 'y':y_max, 'z':z_max}}\r\n", "params": ["Examination", "LowThreshold", "HighThreshold", "PetUnit", "BoundingBox"], "type": "function"}, "CreateCylinderGeometry": {"description": "CreateCylinderGeometry(..)\r\n  Create a cylinder geometry for the current ROI.\r\n  Parameters:\r\n    Radius - The radius (cm) of the cylinder geometry.\r\n    Axis - The axis (cm) of the cylinder geometry in the DICOM \r\n      patient-based coordinate system.\r\n    Length - The length (cm) of the cylinder geometry along \r\n      Axis.\r\n    Examination - The examination where the geometry is created.\r\n    Center - The center coordinate (cm) of the geometry in the \r\n      DICOM patient-based coordinate system.\r\n    VoxelSize - The desired uniform voxel size (cm). Must be \r\n      between 0.01 and 1.0 cm. The default value is None which means \r\n      that a size dependent default voxel size is used. \r\n      Note that a explicitly setting a small voxel size for large \r\n      objects may lead to performance problems due to memory \r\n      limitations.\r\n", "params": ["Radius", "Axis", "Length", "Examination", "Center", "VoxelSize"], "type": "function"}, "AdaptMbsMesh": {"description": "AdaptMbsMesh(..)\r\n  Adapts an MBS mesh to the specified examination.\r\n  Parameters:\r\n    Examination - The examination.\r\n    CustomStatistics - Custom graylevel statistics.\r\n    CustomSettings - Custom MBS settings.\r\n", "params": ["Examination", "CustomStatistics", "CustomSettings"], "type": "function"}, "SetAsExternal": {"description": "SetAsExternal()\r\n  Sets this region of interest as the external ROI. If an external \r\n  ROI already exists, it will be replaced by this one.\r\n", "params": [], "type": "function"}, "CreateExternalGeometries": {"description": "CreateExternalGeometries(..)\r\n  Creates external geometries for the ROI on the specified \r\n  examinations.\r\n  Parameters:\r\n    ReferenceExamination - The reference examination.\r\n    AdditionalExaminationNames - The additional examination \r\n      names.\r\n    ReferenceThresholdLevel - The threshold level that \r\n      determines the outline. Set to None in order to automatically \r\n      calculate threshold value.\r\n      This threshold level is used for all additional examinations \r\n      of same modality.\r\n", "params": ["ReferenceExamination", "AdditionalExaminationNames", "ReferenceThresholdLevel"], "type": "function"}, "CreateMarginGeometry": {"description": "CreateMarginGeometry(..)\r\n  Creates a margin geometry (expansion/contraction).\r\n  Parameters:\r\n    Examination - The examination.\r\n    SourceRoiName - The name of the source region of interest.\r\n    MarginSettings - The margin settings. Defines type (Expand \r\n      or Contract) and distances. All distances must be positive and \r\n      less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n", "params": ["Examination", "SourceRoiName", "MarginSettings"], "type": "function"}, "RoiMaterial": null, "OrganData": {"__RayStation_ID": "-2147383273", "ResponseFunctionTissueName": "", "OrganType": "OrganAtRisk", "RbeCellTypeName": null}, "Color": {"B": 255, "A": 255, "G": 0, "R": 255}, "CreateControllingRoiGeometry": {"description": "CreateControllingRoiGeometry(..)\r\n  Creates controlling ROI geometry for a ROI geometry on a target \r\n  examination using a controlling ROI geometry on a reference \r\n  examination\r\n  Parameters:\r\n    ReferenceExaminationName - The name of the examination on \r\n      which the controlling ROI has a geometry defined.\r\n    TargetExaminationNames - The names of the examinations on \r\n      which to create a controlling ROI geometry.\r\n    RoiGeometryName - The name of the ROI geometry which the \r\n      controlling ROI should adapt to.\r\n    SmoothingRadius - Applies a morphological close and open \r\n      with a structuring element of the given radius \r\n      (in cm) before creating / adapting the triangle mesh. If set \r\n      to 0, no smoothing will be done.\r\n", "params": ["ReferenceExaminationName", "TargetExaminationNames", "RoiGeometryName", "SmoothingRadius"], "type": "function"}, "SetRoiMaterial": {"description": "SetRoiMaterial(..)\r\n  Assigns a new material to this ROI. The material density will \r\n  override the ROI density for dose computation on all image sets.\r\n  Parameters:\r\n    Material - The new material.\r\n", "params": ["Material"], "type": "function"}, "ExcludeFromExport": false, "__RayStation_ID": "-2147383274, 'Bone'", "TransformROI3D": {"description": "TransformROI3D(..)\r\n  Performs a 3D transformation of the ROI\r\n  Parameters:\r\n    Examination - The examination where the geometry is \r\n      transformed\r\n    TransformationMatrix - The transformation matrix\r\n      Example:\r\n        Move the geometry 1 cm in every direction\r\n        TransformationMatrix = {'M11':1, 'M12':0, 'M13':0, 'M14':1,\r\n                                'M21':0, 'M22':1, 'M23':0, 'M24':1,\r\n                                'M31':0, 'M32':0, 'M33':1, 'M34':1,\r\n                                'M41':0, 'M42':0, 'M43':0, 'M44':1}\r\n                  \r\n      The scaling of the transformation matrix must be positive\r\n      The last row of the transformation matrix must be the \r\n      following: 'M41':0, 'M42':0, 'M43':0, 'M44':1\r\n", "params": ["Examination", "TransformationMatrix"], "type": "function"}, "DerivedRoiExpression": null, "DeleteRoi": {"description": "DeleteRoi()\r\n  Action for deleting an ROI.\r\n", "params": [], "type": "function"}, "VolumeThreshold": {"description": "VolumeThreshold(..)\r\n  Threshold ROI geometry based on volume, i.e., keep components of \r\n  input ROI geometry having volume in interval [MinVolume, \r\n  MaxVolume] cm3.\r\n  Typically used to clean up after a gray-level thresholding or \r\n  region-growing operation.\r\n  Parameters:\r\n    InputRoi - The input ROI.\r\n    Examination - The examination.\r\n    MinVolume - The minimum volume (cm3).\r\n    MaxVolume - The maximum volume (cm3).\r\n", "params": ["InputRoi", "Examination", "MinVolume", "MaxVolume"], "type": "function"}, "MultiSpectralThreshold": {"description": "MultiSpectralThreshold(..)\r\n  Multispectral thresholding of examinations in a MR protocol \r\n  group. \r\n  For each examination, LowThreshold and HighThreshold should be \r\n  given. \r\n  The resulting segmented region will consist of points which are in \r\n  the given (examination specific) range for each examination.\r\n  RoiGeometries will be created on each examination.\r\n  Parameters:\r\n    ExaminationNames - The examination names. All selected \r\n      examinations need to be in the same MR protocol group\r\n    LowThresholds - The low thresholds - one for each of the \r\n      selected examinations\r\n    HighThresholds - The high thresholds - one for each of the \r\n      selected examinations\r\n", "params": ["ExaminationNames", "LowThresholds", "HighThresholds"], "type": "function"}, "CreateBoxGeometry": {"description": "CreateBoxGeometry(..)\r\n  Create a box geometry for the current ROI.\r\n  Parameters:\r\n    Size - The size (cm) of the box geometry in the DICOM \r\n      patient-based coordinate system.\r\n    Examination - The examination where the geometry is created.\r\n    Center - The center coordinate (cm) of the geometry in the \r\n      DICOM patient-based coordinate system.\r\n    VoxelSize - The desired uniform voxel size (cm). Must be \r\n      between 0.01 and 1.0 cm. The default value is None which means \r\n      that a size dependent default voxel size is used. \r\n      Note that a explicitly setting a small voxel size for large \r\n      objects may lead to performance problems due to memory \r\n      limitations.\r\n", "params": ["Size", "Examination", "Center", "VoxelSize"], "type": "function"}, "CreateExternalGeometry": {"description": "CreateExternalGeometry(..)\r\n  Creates an external geometry for the ROI on the specified \r\n  examination.\r\n  Parameters:\r\n    Examination - The examination.\r\n    ThresholdLevel - The threshold level that determines the \r\n      outline. Set to None in order to automatically calculate \r\n      threshold value.\r\n", "params": ["Examination", "ThresholdLevel"], "type": "function"}, "BoneSegmentationByRegionGrowing": {"description": "BoneSegmentationByRegionGrowing(..) \r\n  --> No documentation found.\r\n", "params": [], "type": "function"}, "SetAlgebraExpression": {"description": "SetAlgebraExpression(..)\r\n  Sets a derived ROI algebra expression. The expression is defined \r\n  with two expressions, ExpressionA and ExpressionB, and the \r\n  combination of these. Should be followed by UpdateDerivedGeometry \r\n  in order to create the geometry for a specific examination.\r\n  Parameters:\r\n    ExpressionA - Expression A. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionA = { 'Operation': \"Union\", 'SourceRoiNames': \r\n      [\"Roi A\", \"Roi B\"], 'MarginSettings': { 'Type': \"Expand\", \r\n      'Superior': 1, 'Inferior': 1, 'Anterior': 1, 'Posterior': 1, \r\n      'Right': 1, 'Left': 1 } }\r\n    ExpressionB - Expression B. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionB = { 'Operation': \"Intersection\", \r\n      'SourceRoiNames': [\"Bladder\", \"Prostate\"], 'MarginSettings': { \r\n      'Type': \"Contract\", 'Superior': 0, 'Inferior': 0, 'Anterior': \r\n      0, 'Posterior': 0, 'Right': 1, 'Left': 0 } }\r\n    ResultOperation - The final operation to apply between \r\n      ExpressionA and ExpressionB. If it is None, Expression B is \r\n      not used.\r\n      Values:\r\n        * None\r\n        * Union\r\n        * Intersection\r\n        * Subtraction\r\n    ResultMarginSettings - The margin settings to apply to the \r\n      result. Defines type (Expand or Contract) and distances. All \r\n      distances must be positive and less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n", "params": ["ExpressionA", "ExpressionB", "ResultOperation", "ResultMarginSettings"], "type": "function"}, "SetWallExpression": {"description": "SetWallExpression(..)\r\n  Sets a derived expression representing a wall geometry. Should \r\n  be followed by UpdateDerivedGeometry in order to create the \r\n  geometry for a specific examination.\r\n  Parameters:\r\n    SourceRoiName - The name of the source region of interest.\r\n    OutwardDistance - The outward distance, must be positive \r\n      and less than 5 cm.\r\n    InwardDistance - The inward distance, must be positive and \r\n      less than 5 cm.\r\n", "params": ["SourceRoiName", "OutwardDistance", "InwardDistance"], "type": "function"}, "ElasticityParameters": {"__RayStation_ID": "-2147383272", "Stiffness": 1000.0, "VoxelCompressionRatio": 0.47999999999999998}, "Name": "Bone", "CreateSphereGeometry": {"description": "CreateSphereGeometry(..)\r\n  Create a sphere geometry for the current ROI.\r\n  Parameters:\r\n    Radius - The radius (cm) of the sphere geometry.\r\n    Examination - The examination where the geometry is created.\r\n    Center - The center coordinate (cm) of the geometry in the \r\n      DICOM patient-based coordinate system.\r\n    VoxelSize - The desired uniform voxel size (cm). Must be \r\n      between 0.01 and 1.0 cm. The default value is None which means \r\n      that a size dependent default voxel size is used. \r\n      Note that a explicitly setting a small voxel size for large \r\n      objects may lead to performance problems due to memory \r\n      limitations.\r\n", "params": ["Radius", "Examination", "Center", "VoxelSize"], "type": "function"}, "UpdateDerivedGeometry": {"description": "UpdateDerivedGeometry(..)\r\n  Updates the derived geometry for the specified examination.\r\n  Parameters:\r\n    Examination - The examination.\r\n    Algorithm - Defines if the logical set operations use \r\n      contour or voxel based methods. \r\n      Margins (expand/contract) and Wall operations are always \r\n      performed using voxel based methods.\r\n                  \r\n      Possible values:\r\n      * Auto: Automatically select algorithm mode.\r\n      * Contours: Use contour based methods.\r\n      * Voxels: Use voxel based methods.\r\n      Default value is \"Auto\".\r\n", "params": ["Examination", "Algorithm"], "type": "function"}, "Type": "Organ", "CreateFieldOfViewROI": {"description": "CreateFieldOfViewROI(..)\r\n  Creates field-of-view ROI on a CBCT or CT image\r\n  Parameters:\r\n    ExaminationName - The name of the examination on which a \r\n      field-of-view ROI geometry will be created.\r\n", "params": ["ExaminationName"], "type": "function"}, "DeleteExpression": {"description": "DeleteExpression()\r\n  Deletes the derived ROI expression.\r\n", "params": [], "type": "function"}, "CreateRoiGeometryFromDose": {"description": "CreateRoiGeometryFromDose(..) \r\n  --> No documentation found.\r\n", "params": [], "type": "function"}, "RoiNumber": 8, "CreateITV": {"description": "CreateITV(..)\r\n  Creates an ITV ROI from the geometries of a source ROI in \r\n  several examinations. \r\n  The ITV geometry is the union of the geometries in the source ROI, \r\n  with margins applied as a final step.\r\n  Parameters:\r\n    SourceRegionOfInterest - The source ROI, which must have \r\n      geometry in all provided examinations.\r\n    ExaminationNames - List of examinations by name. These \r\n      examinations must be in the same 4D examination group.\r\n    MarginSettingsData - Margins applied to the union of the \r\n      geometries of the source ROI in the provided examinations.\r\n", "params": ["SourceRegionOfInterest", "ExaminationNames", "MarginSettingsData"], "type": "function"}, "CreateDirectionalMarginGeometry": {"description": "CreateDirectionalMarginGeometry(..)\r\n  Creates a beam specific margin ROI geometry by expansion in \r\n  distal, proximal and lateral directions relative either to the \r\n  chosen beam or to the chosen manual direction.\r\n  - Note that there is no dependency between the resulting margin \r\n  ROI geometry and the source ROI geometry or the selected beam.\r\n    If any of those are changed, the margin ROI geometry becomes \r\n  obsolete and must be regenerated.\r\n  - Note that the margin distances are geometrical, not radiological.\r\n  Parameters:\r\n    Examination - The examination.\r\n    SourceRoiName - The name of the source ROI.\r\n    Beam - A beam defining the direction. Must be defined if \r\n      Direction is undefined.\r\n    Direction - The direction in DICOM patient coordinates. \r\n      Must be defined if Beam is undefined.\r\n    DistalDistance - The distal distance in cm.\r\n    ProximalDistance - The proximal distance in cm.\r\n    LateralDistance - The lateral distance in cm.\r\n", "params": ["Examination", "SourceRoiName", "Beam", "Direction", "DistalDistance", "ProximalDistance", "LateralDistance"], "type": "function"}, "CreateAlgebraGeometry": {"description": "CreateAlgebraGeometry(..)\r\n  Creates an algebra geometry.\r\n  Parameters:\r\n    Examination - The examination.\r\n    Algorithm - Defines if the logical set operations use \r\n      contour or voxel based methods. \r\n      Margins (expand/contract) and Wall operations are always \r\n      performed using voxel based methods.\r\n                  \r\n      Possible values:\r\n      * Auto: Automatically select algorithm mode.\r\n      * Contours: Use contour based methods.\r\n      * Voxels: Use voxel based methods.\r\n      Default value is \"Auto\".\r\n    ExpressionA - Expression A. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionA = { 'Operation': \"Union\", 'SourceRoiNames': \r\n      [\"Roi A\", \"Roi B\"], 'MarginSettings': { 'Type': \"Expand\", \r\n      'Superior': 1, 'Inferior': 1, 'Anterior': 1, 'Posterior': 1, \r\n      'Right': 1, 'Left': 1 } }\r\n    ExpressionB - Expression B. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionB = { 'Operation': \"Intersection\", \r\n      'SourceRoiNames': [\"Bladder\", \"Prostate\"], 'MarginSettings': { \r\n      'Type': \"Contract\", 'Superior': 0, 'Inferior': 0, 'Anterior': \r\n      0, 'Posterior': 0, 'Right': 1, 'Left': 0 } }\r\n    ResultOperation - The final operation to apply between \r\n      ExpressionA and ExpressionB. If it is None, Expression B is \r\n      not used.\r\n      Values:\r\n        * None\r\n        * Union\r\n        * Intersection\r\n        * Subtraction\r\n    ResultMarginSettings - The margin settings to apply to the \r\n      result. Defines type (Expand or Contract) and distances. All \r\n      distances must be positive and less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n", "params": ["Examination", "Algorithm", "ExpressionA", "ExpressionB", "ResultOperation", "ResultMarginSettings"], "type": "function"}, "CreateWallGeometry": {"description": "CreateWallGeometry(..)\r\n  Creates a wall geometry.\r\n  Parameters:\r\n    Examination - The examination.\r\n    SourceRoiName - The name of the source region of interest.\r\n    OutwardDistance - The outward distance, must be positive \r\n      and less than 5 cm.\r\n    InwardDistance - The inward distance, must be positive and \r\n      less than 5 cm.\r\n", "params": ["Examination", "SourceRoiName", "OutwardDistance", "InwardDistance"], "type": "function"}}], "CreateStructuresFromTemplate": {"description": "CreateStructuresFromTemplate(..)\r\n  Create structures from template.\r\n  Parameters:\r\n    SourceTemplateName - The source template name.\r\n    SourceExaminationName - The name of the source (template) \r\n      examination.\r\n    SourceRoiNames - List of source (template) ROIs.\r\n    SourcePoiNames - List of source (template) POIs.\r\n    AssociateStructuresByName - Sets whether to associate \r\n      structures by name. \r\n      - If false, target structures with the same name as template \r\n      structures will be duplicated, \r\n        i.e., a new ROI or POI will be created and a suffix will be \r\n      added to the name.\r\n      - If true, target structures that are empty will be populated. \r\n      Non-empty target structures will be disregarded.\r\n      The default value is true.\r\n    TargetExamination - The target examination.\r\n    InitializationOption - Initialization option. Possible \r\n      values;\r\n      * EmptyGeometries\r\n      * AlignImageCenters\r\n      * RigidRegistration\r\n", "params": ["SourceTemplateName", "SourceExaminationName", "SourceRoiNames", "SourcePoiNames", "AssociateStructuresByName", "TargetExamination", "InitializationOption"], "type": "function"}, "CopyRoiGeometry": {"description": "CopyRoiGeometry(..)\r\n  Copies an RoiGeometry from a source structure set to a target \r\n  structure set.\r\n  Parameters:\r\n    SourceExamination - The source examination.\r\n    TargetExamination - The target examination.\r\n    RoiName - The ROI name.\r\n", "params": ["SourceExamination", "TargetExamination", "RoiName"], "type": "function"}, "StructureRegistrationGroups": {}, "StructureSets": [{"OutlineRoiGeometry": {"GetCenterOfRoi": {"description": "GetCenterOfRoi()\r\n  Gets the ROI center of mass.\r\n  Returns:\r\n    The center-of-mass of the ROI in DICOM coordinates.\r\n", "params": [], "type": "function"}, "GetRoiVolume": {"description": "GetRoiVolume()\r\n  Gets the ROI volume.\r\n  Returns:\r\n    Gets the ROI volume in cm^3.\r\n", "params": [], "type": "function"}, "GetCoordinateForMaxGrayLevel": {"description": "GetCoordinateForMaxGrayLevel(..) \r\n  --> No documentation found.\r\n", "params": [], "type": "function"}, "ExportRoiGeometryAsMetaImage": {"description": "ExportRoiGeometryAsMetaImage(..)\r\n  Export a roi geometry (using its voxel representation) as meta \r\n  image file (http://www.itk.org/Wiki/ITK/MetaIO/Documentation).\r\n  It is possible to select to get the region out in a format (image \r\n  size, voxel size) corresponding the examination it is defined on.\r\n  As the voxel representation is used voxels in the exported image \r\n  will have values between 0 and 255, \r\n  where 0 correspond to voxels outside the roi geometry, 255 to \r\n  voxels completely inside the roi geometry, and 1 - 254 to voxels \r\n  on the boundary of the roi geometry, describing the relative \r\n  belongingness to the roi geometry.\r\n              \r\n  Note that meta image file uses mm as unit. Hence \r\n  Offset/Position/Origin and ElementSize/ElementSpacing should be \r\n  given in mm.\r\n  Parameters:\r\n    MetaFileName - File name\r\n    AsExamination - If true, the number of voxels, voxel size \r\n      and image corner will be the same as the examination the \r\n      roigeometry is defined on\r\n", "params": ["MetaFileName", "AsExamination"], "type": "function"}, "GetBoundingBox": {"description": "GetBoundingBox()\r\n  Gets the bounding box of the ROI geometry.\r\n  Returns:\r\n    The bounding box of the ROI geometry as an array of points \r\n    corresponding to min corner and max corner (in DICOM coordinates).\r\n", "params": [], "type": "function"}, "SetRepresentation": {"description": "SetRepresentation(..)\r\n  Primary shape of the roi geometry will (if necessary) be changed \r\n  to the selected representation. Representation can be:\r\n  - Contours\r\n  - Voxels\r\n  - Triangle mesh\r\n  When changing the primary shape, a conversion between shapes is \r\n  done which can cause a small loss of data. \r\n  For more information on the conversion algorithms used and its \r\n  implications, please see RayStation Reference Manual chapter \r\n  Volume handling.\r\n              \r\n  Remark that a geometry cannot be converted to a MBS mesh using \r\n  this method. This can be done from the UI using the Create MBS \r\n  ROI(s) functionality, selecting \"ROI based on contour ROI geometry\"\r\n  Parameters:\r\n    Representation - Name of the Representation\r\n", "params": ["Representation"], "type": "function"}, "DeleteGeometry": {"description": "DeleteGeometry()\r\n  Deletes the geometry of a RoiGeometry.\r\n", "params": [], "type": "function"}, "ExportRoiGeometryAsMetaImageWithSpecifiedGridSettings": {"description": "ExportRoiGeometryAsMetaImageWithSpecifiedGridSettings(..)\r\n   Export a roi geometry (using its voxel representation) as meta \r\n  image file (http://www.itk.org/Wiki/ITK/MetaIO/Documentation).\r\n   Dimensions are given by parameters VoxelSize, Corner and \r\n  NumberOfVoxels. \r\n   Note that the grid settings need to be such that the bounding box \r\n  of the geometry is covered.\r\n              \r\n   As the voxel representation is used voxels in the exported image \r\n  will have values between 0 and 255, \r\n   where 0 correspond to voxels outside the roi geometry, 255 to \r\n  voxels completely inside the roi geometry, and 1 - 254 to voxels \r\n  on the boundary of the roi geometry, describing the relative \r\n  belongingness to the roi geometry.\r\n   \r\n   Note that meta image file uses mm as unit. Hence \r\n  Offset/Position/Origin and ElementSize/ElementSpacing is given in \r\n  mm.\r\n  Parameters:\r\n    MetaFileName - File name\r\n    VoxelSize - Voxel size in the exported image\r\n    Corner - Corner for the exported image\r\n    NumberOfVoxels - Number of voxels in the exported image\r\n", "params": ["MetaFileName", "VoxelSize", "Corner", "NumberOfVoxels"], "type": "function"}, "__RayStation_ID": "-2147383237, 'External'", "PrimaryShape": {"DerivedRoiStatus": null, "__RayStation_ID": "-2147383236", "LineType": "PolyLine", "IsClosed": true}, "HasContours": {"description": "HasContours()\r\n  Returns true if PrimaryShape has contours.\r\n  Returns:\r\n    True or False depending on if RoiGeometry.PrimaryShape \r\n    contains contours.\r\n", "params": [], "type": "function"}, "DicomImportHistory": null, "GetDependentRois": {"description": "GetDependentRois()\r\n  Gets the name of all ROIs included in the derived ROI expression.\r\n  Returns:\r\n    List with ROI names\r\n", "params": [], "type": "function"}, "OfRoi": {"SetMarginExpression": {"description": "SetMarginExpression(..)\r\n  Sets a derived ROI expression representing a margin \r\n  (expansion/contraction). Should be followed by \r\n  UpdateDerivedGeometry in order to create the geometry for a \r\n  specific examination.\r\n  Parameters:\r\n    SourceRoiName - The name of the source region of interest.\r\n    MarginSettings - The margin settings. Defines type (Expand \r\n      or Contract) and distances. All distances must be positive and \r\n      less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n", "params": ["SourceRoiName", "MarginSettings"], "type": "function"}, "GrayLevelThreshold": {"description": "GrayLevelThreshold(..)\r\n  Gray level thresholding.\r\n  Parameters:\r\n    Examination - The examination.\r\n    LowThreshold - The low threshold. The unit is in rescaled \r\n      pixel values, e.g. HU for CT. For PET images, PetUnit must be \r\n      specified.\r\n    HighThreshold - The high threshold. The unit is in \r\n      rescaled pixel values, e.g., HU for CT. For PET images, \r\n      PetUnit must be specified.\r\n    PetUnit - The unit for PET images. Common values:\r\n      * Bq/ml (activity concentration)\r\n      * g/ml (SUV)\r\n    BoundingBox - The bounding box. If specified, only pixels \r\n      located inside the bounding box are thresholded, pixels \r\n      outside are ignored. If not specified the whole image set is \r\n      thresholded. The bounding box is defined by the minimum and \r\n      maximum corners, MinCorner and MaxCorner.\r\n      Example:\r\n         To consider the bounding box defined by the points (x_min, \r\n      y_min, z_min) and (x_max, y_max, z_max), set \r\n      BoundingBox={\"MinCorner\":{'x':x_min, 'y':y_min, 'z':z_min}, \r\n      'MaxCorner':{'x':x_max, 'y':y_max, 'z':z_max}}\r\n", "params": ["Examination", "LowThreshold", "HighThreshold", "PetUnit", "BoundingBox"], "type": "function"}, "CreateCylinderGeometry": {"description": "CreateCylinderGeometry(..)\r\n  Create a cylinder geometry for the current ROI.\r\n  Parameters:\r\n    Radius - The radius (cm) of the cylinder geometry.\r\n    Axis - The axis (cm) of the cylinder geometry in the DICOM \r\n      patient-based coordinate system.\r\n    Length - The length (cm) of the cylinder geometry along \r\n      Axis.\r\n    Examination - The examination where the geometry is created.\r\n    Center - The center coordinate (cm) of the geometry in the \r\n      DICOM patient-based coordinate system.\r\n    VoxelSize - The desired uniform voxel size (cm). Must be \r\n      between 0.01 and 1.0 cm. The default value is None which means \r\n      that a size dependent default voxel size is used. \r\n      Note that a explicitly setting a small voxel size for large \r\n      objects may lead to performance problems due to memory \r\n      limitations.\r\n", "params": ["Radius", "Axis", "Length", "Examination", "Center", "VoxelSize"], "type": "function"}, "AdaptMbsMesh": {"description": "AdaptMbsMesh(..)\r\n  Adapts an MBS mesh to the specified examination.\r\n  Parameters:\r\n    Examination - The examination.\r\n    CustomStatistics - Custom graylevel statistics.\r\n    CustomSettings - Custom MBS settings.\r\n", "params": ["Examination", "CustomStatistics", "CustomSettings"], "type": "function"}, "SetAsExternal": {"description": "SetAsExternal()\r\n  Sets this region of interest as the external ROI. If an external \r\n  ROI already exists, it will be replaced by this one.\r\n", "params": [], "type": "function"}, "CreateExternalGeometries": {"description": "CreateExternalGeometries(..)\r\n  Creates external geometries for the ROI on the specified \r\n  examinations.\r\n  Parameters:\r\n    ReferenceExamination - The reference examination.\r\n    AdditionalExaminationNames - The additional examination \r\n      names.\r\n    ReferenceThresholdLevel - The threshold level that \r\n      determines the outline. Set to None in order to automatically \r\n      calculate threshold value.\r\n      This threshold level is used for all additional examinations \r\n      of same modality.\r\n", "params": ["ReferenceExamination", "AdditionalExaminationNames", "ReferenceThresholdLevel"], "type": "function"}, "CreateMarginGeometry": {"description": "CreateMarginGeometry(..)\r\n  Creates a margin geometry (expansion/contraction).\r\n  Parameters:\r\n    Examination - The examination.\r\n    SourceRoiName - The name of the source region of interest.\r\n    MarginSettings - The margin settings. Defines type (Expand \r\n      or Contract) and distances. All distances must be positive and \r\n      less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n", "params": ["Examination", "SourceRoiName", "MarginSettings"], "type": "function"}, "RoiMaterial": null, "OrganData": {"__RayStation_ID": "-2147383260", "ResponseFunctionTissueName": "", "OrganType": "OrganAtRisk", "RbeCellTypeName": null}, "Color": {"B": 0, "A": 255, "G": 0, "R": 64}, "CreateControllingRoiGeometry": {"description": "CreateControllingRoiGeometry(..)\r\n  Creates controlling ROI geometry for a ROI geometry on a target \r\n  examination using a controlling ROI geometry on a reference \r\n  examination\r\n  Parameters:\r\n    ReferenceExaminationName - The name of the examination on \r\n      which the controlling ROI has a geometry defined.\r\n    TargetExaminationNames - The names of the examinations on \r\n      which to create a controlling ROI geometry.\r\n    RoiGeometryName - The name of the ROI geometry which the \r\n      controlling ROI should adapt to.\r\n    SmoothingRadius - Applies a morphological close and open \r\n      with a structuring element of the given radius \r\n      (in cm) before creating / adapting the triangle mesh. If set \r\n      to 0, no smoothing will be done.\r\n", "params": ["ReferenceExaminationName", "TargetExaminationNames", "RoiGeometryName", "SmoothingRadius"], "type": "function"}, "SetRoiMaterial": {"description": "SetRoiMaterial(..)\r\n  Assigns a new material to this ROI. The material density will \r\n  override the ROI density for dose computation on all image sets.\r\n  Parameters:\r\n    Material - The new material.\r\n", "params": ["Material"], "type": "function"}, "ExcludeFromExport": false, "__RayStation_ID": "-2147383261, 'External'", "TransformROI3D": {"description": "TransformROI3D(..)\r\n  Performs a 3D transformation of the ROI\r\n  Parameters:\r\n    Examination - The examination where the geometry is \r\n      transformed\r\n    TransformationMatrix - The transformation matrix\r\n      Example:\r\n        Move the geometry 1 cm in every direction\r\n        TransformationMatrix = {'M11':1, 'M12':0, 'M13':0, 'M14':1,\r\n                                'M21':0, 'M22':1, 'M23':0, 'M24':1,\r\n                                'M31':0, 'M32':0, 'M33':1, 'M34':1,\r\n                                'M41':0, 'M42':0, 'M43':0, 'M44':1}\r\n                  \r\n      The scaling of the transformation matrix must be positive\r\n      The last row of the transformation matrix must be the \r\n      following: 'M41':0, 'M42':0, 'M43':0, 'M44':1\r\n", "params": ["Examination", "TransformationMatrix"], "type": "function"}, "DerivedRoiExpression": null, "DeleteRoi": {"description": "DeleteRoi()\r\n  Action for deleting an ROI.\r\n", "params": [], "type": "function"}, "VolumeThreshold": {"description": "VolumeThreshold(..)\r\n  Threshold ROI geometry based on volume, i.e., keep components of \r\n  input ROI geometry having volume in interval [MinVolume, \r\n  MaxVolume] cm3.\r\n  Typically used to clean up after a gray-level thresholding or \r\n  region-growing operation.\r\n  Parameters:\r\n    InputRoi - The input ROI.\r\n    Examination - The examination.\r\n    MinVolume - The minimum volume (cm3).\r\n    MaxVolume - The maximum volume (cm3).\r\n", "params": ["InputRoi", "Examination", "MinVolume", "MaxVolume"], "type": "function"}, "MultiSpectralThreshold": {"description": "MultiSpectralThreshold(..)\r\n  Multispectral thresholding of examinations in a MR protocol \r\n  group. \r\n  For each examination, LowThreshold and HighThreshold should be \r\n  given. \r\n  The resulting segmented region will consist of points which are in \r\n  the given (examination specific) range for each examination.\r\n  RoiGeometries will be created on each examination.\r\n  Parameters:\r\n    ExaminationNames - The examination names. All selected \r\n      examinations need to be in the same MR protocol group\r\n    LowThresholds - The low thresholds - one for each of the \r\n      selected examinations\r\n    HighThresholds - The high thresholds - one for each of the \r\n      selected examinations\r\n", "params": ["ExaminationNames", "LowThresholds", "HighThresholds"], "type": "function"}, "CreateBoxGeometry": {"description": "CreateBoxGeometry(..)\r\n  Create a box geometry for the current ROI.\r\n  Parameters:\r\n    Size - The size (cm) of the box geometry in the DICOM \r\n      patient-based coordinate system.\r\n    Examination - The examination where the geometry is created.\r\n    Center - The center coordinate (cm) of the geometry in the \r\n      DICOM patient-based coordinate system.\r\n    VoxelSize - The desired uniform voxel size (cm). Must be \r\n      between 0.01 and 1.0 cm. The default value is None which means \r\n      that a size dependent default voxel size is used. \r\n      Note that a explicitly setting a small voxel size for large \r\n      objects may lead to performance problems due to memory \r\n      limitations.\r\n", "params": ["Size", "Examination", "Center", "VoxelSize"], "type": "function"}, "CreateExternalGeometry": {"description": "CreateExternalGeometry(..)\r\n  Creates an external geometry for the ROI on the specified \r\n  examination.\r\n  Parameters:\r\n    Examination - The examination.\r\n    ThresholdLevel - The threshold level that determines the \r\n      outline. Set to None in order to automatically calculate \r\n      threshold value.\r\n", "params": ["Examination", "ThresholdLevel"], "type": "function"}, "BoneSegmentationByRegionGrowing": {"description": "BoneSegmentationByRegionGrowing(..) \r\n  --> No documentation found.\r\n", "params": [], "type": "function"}, "SetAlgebraExpression": {"description": "SetAlgebraExpression(..)\r\n  Sets a derived ROI algebra expression. The expression is defined \r\n  with two expressions, ExpressionA and ExpressionB, and the \r\n  combination of these. Should be followed by UpdateDerivedGeometry \r\n  in order to create the geometry for a specific examination.\r\n  Parameters:\r\n    ExpressionA - Expression A. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionA = { 'Operation': \"Union\", 'SourceRoiNames': \r\n      [\"Roi A\", \"Roi B\"], 'MarginSettings': { 'Type': \"Expand\", \r\n      'Superior': 1, 'Inferior': 1, 'Anterior': 1, 'Posterior': 1, \r\n      'Right': 1, 'Left': 1 } }\r\n    ExpressionB - Expression B. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionB = { 'Operation': \"Intersection\", \r\n      'SourceRoiNames': [\"Bladder\", \"Prostate\"], 'MarginSettings': { \r\n      'Type': \"Contract\", 'Superior': 0, 'Inferior': 0, 'Anterior': \r\n      0, 'Posterior': 0, 'Right': 1, 'Left': 0 } }\r\n    ResultOperation - The final operation to apply between \r\n      ExpressionA and ExpressionB. If it is None, Expression B is \r\n      not used.\r\n      Values:\r\n        * None\r\n        * Union\r\n        * Intersection\r\n        * Subtraction\r\n    ResultMarginSettings - The margin settings to apply to the \r\n      result. Defines type (Expand or Contract) and distances. All \r\n      distances must be positive and less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n", "params": ["ExpressionA", "ExpressionB", "ResultOperation", "ResultMarginSettings"], "type": "function"}, "SetWallExpression": {"description": "SetWallExpression(..)\r\n  Sets a derived expression representing a wall geometry. Should \r\n  be followed by UpdateDerivedGeometry in order to create the \r\n  geometry for a specific examination.\r\n  Parameters:\r\n    SourceRoiName - The name of the source region of interest.\r\n    OutwardDistance - The outward distance, must be positive \r\n      and less than 5 cm.\r\n    InwardDistance - The inward distance, must be positive and \r\n      less than 5 cm.\r\n", "params": ["SourceRoiName", "OutwardDistance", "InwardDistance"], "type": "function"}, "ElasticityParameters": {"__RayStation_ID": "-2147383259", "Stiffness": 1000.0, "VoxelCompressionRatio": 0.47999999999999998}, "Name": "External", "CreateSphereGeometry": {"description": "CreateSphereGeometry(..)\r\n  Create a sphere geometry for the current ROI.\r\n  Parameters:\r\n    Radius - The radius (cm) of the sphere geometry.\r\n    Examination - The examination where the geometry is created.\r\n    Center - The center coordinate (cm) of the geometry in the \r\n      DICOM patient-based coordinate system.\r\n    VoxelSize - The desired uniform voxel size (cm). Must be \r\n      between 0.01 and 1.0 cm. The default value is None which means \r\n      that a size dependent default voxel size is used. \r\n      Note that a explicitly setting a small voxel size for large \r\n      objects may lead to performance problems due to memory \r\n      limitations.\r\n", "params": ["Radius", "Examination", "Center", "VoxelSize"], "type": "function"}, "UpdateDerivedGeometry": {"description": "UpdateDerivedGeometry(..)\r\n  Updates the derived geometry for the specified examination.\r\n  Parameters:\r\n    Examination - The examination.\r\n    Algorithm - Defines if the logical set operations use \r\n      contour or voxel based methods. \r\n      Margins (expand/contract) and Wall operations are always \r\n      performed using voxel based methods.\r\n                  \r\n      Possible values:\r\n      * Auto: Automatically select algorithm mode.\r\n      * Contours: Use contour based methods.\r\n      * Voxels: Use voxel based methods.\r\n      Default value is \"Auto\".\r\n", "params": ["Examination", "Algorithm"], "type": "function"}, "Type": "External", "CreateFieldOfViewROI": {"description": "CreateFieldOfViewROI(..)\r\n  Creates field-of-view ROI on a CBCT or CT image\r\n  Parameters:\r\n    ExaminationName - The name of the examination on which a \r\n      field-of-view ROI geometry will be created.\r\n", "params": ["ExaminationName"], "type": "function"}, "DeleteExpression": {"description": "DeleteExpression()\r\n  Deletes the derived ROI expression.\r\n", "params": [], "type": "function"}, "CreateRoiGeometryFromDose": {"description": "CreateRoiGeometryFromDose(..) \r\n  --> No documentation found.\r\n", "params": [], "type": "function"}, "RoiNumber": 14, "CreateITV": {"description": "CreateITV(..)\r\n  Creates an ITV ROI from the geometries of a source ROI in \r\n  several examinations. \r\n  The ITV geometry is the union of the geometries in the source ROI, \r\n  with margins applied as a final step.\r\n  Parameters:\r\n    SourceRegionOfInterest - The source ROI, which must have \r\n      geometry in all provided examinations.\r\n    ExaminationNames - List of examinations by name. These \r\n      examinations must be in the same 4D examination group.\r\n    MarginSettingsData - Margins applied to the union of the \r\n      geometries of the source ROI in the provided examinations.\r\n", "params": ["SourceRegionOfInterest", "ExaminationNames", "MarginSettingsData"], "type": "function"}, "CreateDirectionalMarginGeometry": {"description": "CreateDirectionalMarginGeometry(..)\r\n  Creates a beam specific margin ROI geometry by expansion in \r\n  distal, proximal and lateral directions relative either to the \r\n  chosen beam or to the chosen manual direction.\r\n  - Note that there is no dependency between the resulting margin \r\n  ROI geometry and the source ROI geometry or the selected beam.\r\n    If any of those are changed, the margin ROI geometry becomes \r\n  obsolete and must be regenerated.\r\n  - Note that the margin distances are geometrical, not radiological.\r\n  Parameters:\r\n    Examination - The examination.\r\n    SourceRoiName - The name of the source ROI.\r\n    Beam - A beam defining the direction. Must be defined if \r\n      Direction is undefined.\r\n    Direction - The direction in DICOM patient coordinates. \r\n      Must be defined if Beam is undefined.\r\n    DistalDistance - The distal distance in cm.\r\n    ProximalDistance - The proximal distance in cm.\r\n    LateralDistance - The lateral distance in cm.\r\n", "params": ["Examination", "SourceRoiName", "Beam", "Direction", "DistalDistance", "ProximalDistance", "LateralDistance"], "type": "function"}, "CreateAlgebraGeometry": {"description": "CreateAlgebraGeometry(..)\r\n  Creates an algebra geometry.\r\n  Parameters:\r\n    Examination - The examination.\r\n    Algorithm - Defines if the logical set operations use \r\n      contour or voxel based methods. \r\n      Margins (expand/contract) and Wall operations are always \r\n      performed using voxel based methods.\r\n                  \r\n      Possible values:\r\n      * Auto: Automatically select algorithm mode.\r\n      * Contours: Use contour based methods.\r\n      * Voxels: Use voxel based methods.\r\n      Default value is \"Auto\".\r\n    ExpressionA - Expression A. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionA = { 'Operation': \"Union\", 'SourceRoiNames': \r\n      [\"Roi A\", \"Roi B\"], 'MarginSettings': { 'Type': \"Expand\", \r\n      'Superior': 1, 'Inferior': 1, 'Anterior': 1, 'Posterior': 1, \r\n      'Right': 1, 'Left': 1 } }\r\n    ExpressionB - Expression B. Operation must be Union or \r\n      Intersection.\r\n      Example: \r\n        ExpressionB = { 'Operation': \"Intersection\", \r\n      'SourceRoiNames': [\"Bladder\", \"Prostate\"], 'MarginSettings': { \r\n      'Type': \"Contract\", 'Superior': 0, 'Inferior': 0, 'Anterior': \r\n      0, 'Posterior': 0, 'Right': 1, 'Left': 0 } }\r\n    ResultOperation - The final operation to apply between \r\n      ExpressionA and ExpressionB. If it is None, Expression B is \r\n      not used.\r\n      Values:\r\n        * None\r\n        * Union\r\n        * Intersection\r\n        * Subtraction\r\n    ResultMarginSettings - The margin settings to apply to the \r\n      result. Defines type (Expand or Contract) and distances. All \r\n      distances must be positive and less than 15 cm.\r\n      Example: MarginSettings = { 'Type': \"Contract\", 'Superior' : \r\n      0.0, 'Inferior': 1.0, 'Anterior': 1.0, 'Posterior': 0.1, \r\n      'Right': 0.0, 'Left': 2.3 }\r\n", "params": ["Examination", "Algorithm", "ExpressionA", "ExpressionB", "ResultOperation", "ResultMarginSettings"], "type": "function"}, "CreateWallGeometry": {"description": "CreateWallGeometry(..)\r\n  Creates a wall geometry.\r\n  Parameters:\r\n    Examination - The examination.\r\n    SourceRoiName - The name of the source region of interest.\r\n    OutwardDistance - The outward distance, must be positive \r\n      and less than 5 cm.\r\n    InwardDistance - The inward distance, must be positive and \r\n      less than 5 cm.\r\n", "params": ["Examination", "SourceRoiName", "OutwardDistance", "InwardDistance"], "type": "function"}}}, "CreateMarkerPois": {"description": "CreateMarkerPois(..)\r\n  Identifies breast fiducials in a CT data set and creates the \r\n  corresponding marker POIs.\r\n  Parameters:\r\n    Names - The names of the marker POIs. Keys are: \r\n      \"Superior\", \"Inferior\", \"Lateral\" and \"Medial\". Values \r\n      defaults to: \"Superior\":\"MED\", \"Inferior\":\"INF\", \r\n      \"Medial\":\"MED\" and \"Lateral\":\"LAT\".\r\n    Colors - The display colors of the marker POIs. Use named \r\n      colors such as 'Red' or an ARGB value such as '#FFFF0000'. \r\n      Keys are: \"Superior\", \"Inferior\", \"Lateral\" and \"Medial\". \r\n      Values defaults to: \"Superior\":\"Purple\", \"Inferior\":\"Red\", \r\n      \"Medial\":\"Yellow\" and \"Lateral\":\"Blue\".\r\n", "params": ["Names", "Colors"], "type": "function"}, "CopyRoiGeometryToAnotherROI": {"description": "CopyRoiGeometryToAnotherROI(..)\r\n  Copy the ROI geometry of an ROI to another ROI.\r\n  This method is for experimental use - use with care.\r\n  Parameters:\r\n    FromROI - Name of the ROI with the geometry to copy.\r\n    ToROI - Name of the ROI the geometry shall be copied to.\r\n", "params": ["FromROI", "ToROI"], "type": "function"}, "ModificationInfo": {"ModificationTime": "", "SoftwareVersion": "5.99.0.16", "UserName": "ICR\\hmuessemann", "__RayStation_ID": "-2147176136", "DicomUID": "1.2.752.243.1.1.20170725135008869.4000.22145", "ImportedDicomUID": ""}, "RoiGeometries": [{"__RayStation_ID": "-2147383247, 'Bone'", "id_reference": true}], "PoiGeometries": [{"__RayStation_ID": "-2147241214, 'loc'", "id_reference": true}], "ImportSegmentationAsMetaImage": {"description": "ImportSegmentationAsMetaImage(..)\r\n  Import segmentation as meta image file \r\n  (http://www.itk.org/Wiki/ITK/MetaIO/Documentation).\r\n              \r\n  Note that meta image file uses mm as unit. Hence \r\n  Offset/Position/Origin and ElementSize/ElementSpacing should be \r\n  given in mm.\r\n  This method is for experimental use - use with care.\r\n  Parameters:\r\n    MetaFileName - File name\r\n    RoiNamesAndLabels - Dictionary containing wanted ROI names \r\n      and their corresponding labels in the meta image\r\n    UseGreaterOrEqual - Default false. If true, ROI will be \r\n      equal to all voxels with values >= label\r\n", "params": ["MetaFileName", "RoiNamesAndLabels", "UseGreaterOrEqual"], "type": "function"}, "RoiSurfaceToSurfaceDistanceBasedOnDT": {"description": "RoiSurfaceToSurfaceDistanceBasedOnDT(..)\r\n  Measures the distance between the surfaces of two ROI geometries \r\n  using a distance transform based approach. \r\n  Each point (/voxel) on the surface of the target roi will be \r\n  assigned the minimum distance to a point (/voxel) on the surface \r\n  of the reference roi. \r\n  Note that the measurements are not symmetric\r\n  A dictionary with average, max and min distances are returned\r\n  Parameters:\r\n    ReferenceRoiName - Name of roi from which surface to \r\n      compute the distance\r\n    TargetRoiName - Name of roi to which surface to compute \r\n      the distance\r\n  Returns:\r\n    A dictionary with \"Average\", \"Max\", and \"Min\" distances\r\n", "params": ["ReferenceRoiName", "TargetRoiName"], "type": "function"}, "GetSuperiorInferiorRangeForExternalGeometry": {"description": "GetSuperiorInferiorRangeForExternalGeometry()\r\n  Gets the sup-inf range for the external geometry.\r\n  Utility method for OutlineMbsMeshAction.\r\n  Returns:\r\n    A point with the range.\r\n", "params": [], "type": "function"}, "CreatePoisFromFiducialMarkers": {"description": "CreatePoisFromFiducialMarkers(..)\r\n  Identifies fiducials in a CT data set and creates the \r\n  corresponding POIs.\r\n  User can select to identify fiducials inside a ROI or inside the \r\n  patient outline.\r\n  Parameters:\r\n    PoiBaseName - The base name of the marker POIs. POIs will \r\n      be labelled POI_id\r\n    DelimitingRoiName - Name of delimiting ROI. If left empty, \r\n      the External ROI will be used.\r\n    LowDensityThreshold - \r\n", "params": ["PoiBaseName", "DelimitingRoiName", "LowDensityThreshold"], "type": "function"}, "OnExamination": {"AssignToNewFrameOfReference": {"description": "AssignToNewFrameOfReference()\r\n  Method for assigning a new frame-of-reference to the examination. \r\n              \r\n  Stored dicom data will be updated with the new Frame of Reference \r\n  UID (0020, 0052), new SOP Instance UIDs (0008, 0018) and a new \r\n  Series Instance UIDs (0020, 000E). \r\n  The modified tags will be used if the examination is exported.\r\n              \r\n  Note that if the method is used on an examination which is in the \r\n  same frame-of-reference as another examination or is in the same \r\n  frame-of-reference as the to or from frame-of-reference in a \r\n  FrameOfReferenceRegistration, \r\n  methods demanding that examinations are in the same \r\n  frame-of-reference (or has a frame-of-reference registration \r\n  defined), such as create deformable registraion or compute dose on \r\n  additional set,\r\n  can not be used until a new frame-of-reference registration \r\n  between the examinations has been created.\r\n  Can only be used if the examination:\r\n  - has not been used to create a frame-of-reference registration\r\n  - is not referenced in a structure registration (i.e., added rigid \r\n  transform or deformable registration), \r\n  - is not part of an examination group,\r\n  - is not referenced by a treatment plan, or\r\n  - does not have computed doses\r\n              \r\n  Patient will be closed and reopened in order to initalize views \r\n  correctly given the new frame-of-reference\r\n", "params": [], "type": "function"}, "EquipmentInfo": {"SetDensityComputationParameters": {"description": "SetDensityComputationParameters(..) \r\n  --> No documentation found.\r\n", "params": [], "type": "function"}, "SetImagingSystemReference": {"description": "SetImagingSystemReference(..)\r\n  Action that sets ImagingSystemReference for the EquipmentInfo of \r\n  an Examination. \r\n  If the examination belongs to an 4DCT group, all examinations in \r\n  the group will be assigned the selected ImagingSystem.\r\n  Only commissioned, nondepricated ImagingSystems can be used.\r\n  If the selected ImagingSystem is a CBCT machine, Modality will be \r\n  updated to 'CBCT'.\r\n  Parameters:\r\n    ImagingSystemName - The name of the ImagingSystem\r\n      Note: if left empty ImagingSystem will be assigned 'None'. If \r\n      changing from a CBCT machine, Modality will be updated to 'CT'\r\n", "params": ["ImagingSystemName"], "type": "function"}, "SetCtToDensityTableForCbctImage": {"description": "SetCtToDensityTableForCbctImage(..)\r\n  Action that sets CtToDensityTable for a CBCT image. In parameter \r\n  is an array with five short ints that correspond to the density \r\n  thresholds between:\r\n    Air to Lung\r\n    Lung to Adipose\r\n    Adipose to Tissue\r\n    Tissue to Cartilage/Bone\r\n    Cartilage/Bone to Other\r\n  Values within the threshold ranges will be mapped to the following \r\n  densities:\r\n    Materials.Air             0.00121\r\n    Materials.Lung            0.26\r\n    Materials.Adipose         0.95\r\n    Materials.Tissue          1.05\r\n    Materials.CartilageBone   1.6\r\n    Materials.Other           3.0\r\n  Parameters:\r\n    DensityThresholds -  Density thresholds (in CBCT values) \r\n      used to create the CT to density table\r\n", "params": ["DensityThresholds"], "type": "function"}, "FrameOfReference": "2.25.113671410927236086855132530142775996689", "ImageSpecificDensityComputationParameters": null, "Modality": "CT", "CopyCtToDensityTableFromAnotherCbctImage": {"description": "CopyCtToDensityTableFromAnotherCbctImage(..)\r\n  Reuses the CT to density table from another CBCT image. \r\n  Typically this is done in the dose tracking use case. The CT to \r\n  density table is created for the first fraction image and then \r\n  used for all other fraction images.\r\n  Parameters:\r\n    FromExaminationName -  Name of the examination from which \r\n      to copy the CT to density table\r\n", "params": ["FromExaminationName"], "type": "function"}, "__RayStation_ID": "-2147383292", "CbctSettings": null, "SetImageSpecificCtToDensityTable": {"description": "SetImageSpecificCtToDensityTable(..)\r\n  Action that sets an image specific CT to density table for an \r\n  Examination.\r\n  Currently it can only be used for CT images.\r\n  Parameters:\r\n    HU - Array with CT values [in HU]\r\n    Rho - Array with mass density values [in g/cm^3]\r\n", "params": ["HU", "Rho"], "type": "function"}, "ImagingSystemReference": {"ImagingSystemName": "Generic CT", "CommissioningTime": ""}}, "ImportFraction": 0, "GetAffineTransformationParametersGivenCenterOfRotation": {"description": "GetAffineTransformationParametersGivenCenterOfRotation(..)\r\n  Method for extracting registration parameters in elastix \r\n  AffineTransformation format.\r\n  Parameters:\r\n    TransformationMatrix - \r\n    CenterOfRotation - \r\n", "params": ["TransformationMatrix", "CenterOfRotation"], "type": "function"}, "PatientPosition": "HFS", "ExportExaminationAsMetaImage": {"description": "ExportExaminationAsMetaImage(..)\r\n  Export examination as a meta image file \r\n  (http://www.itk.org/Wiki/ITK/MetaIO/Documentation).\r\n              \r\n  ObjectType              = Image\r\n  NDims                   = 3\r\n  BinaryData              = True\r\n  BinaryDataByteOrderMSB  = False\r\n  CompressedData          = False\r\n  Offset                  = corner center in x, corner center in y, \r\n  corner center in z\r\n  ElementSpacing          = voxel size in x, voxel size in y, voxel \r\n  size in z\r\n  DimSize                 = number of voxels in x, number of voxels \r\n  in y, number of voxels in z\r\n  ElementNumberOfChannels = 1\r\n  ElementType             = MET_SHORT\r\n  ElementDataFile         = MetaFileName\r\n  Note that meta image file uses mm as unit. Hence Offset and \r\n  ElementSpacing will be exported in mm.\r\n  This method is for experimental use - use with care.\r\n  Parameters:\r\n    MetaFileName - File name\r\n", "params": ["MetaFileName"], "type": "function"}, "CropImageStackAndStoreAsNewExamination": {"description": "CropImageStackAndStoreAsNewExamination(..)\r\n  Crops an image stack based on the bounding box described by \r\n  parameters MinCorner and MaxCorner. \r\n  The cropped image stack is stored as a new examination, in the \r\n  same frame-of-reference and with the same voxel size as the \r\n  original.\r\n              \r\n  This method is for experimental use - use with care.\r\n  Parameters:\r\n    MinCorner - Min corner of bounding box\r\n    MaxCorner - Max corner of bounding box\r\n  Returns:\r\n    \r\n", "params": ["MinCorner", "MaxCorner"], "type": "function"}, "GetCtToDensityTableForCbctImage": {"description": "GetCtToDensityTableForCbctImage()\r\n  Computes automatically the thresholds needed for creating a CT \r\n  to density table for CBCT and creates the corresponding CT to \r\n  density table. \r\n  The CT to density table will be the same as when the 'auto' option \r\n  is used in the \"Create Density Table for CBCT\" dialog.\r\n  Example:\r\n    [huArray, rhoArray] = cbct.GetCtToDensityTableForCbctImage()\r\n  Returns:\r\n    Returns a list with two arrays. The first array contains the \r\n    HU values [Hounsfield units] and the second array the densities \r\n    [g/cm^3].\r\n", "params": [], "type": "function"}, "GetAcquisitionDataFromDicom": {"description": "GetAcquisitionDataFromDicom()\r\n  Gets acquisition related DICOM tags for the given examination.\r\n  The return value is a dictionary consisting of four modules:\r\n    'EquipmentModule'\r\n    'StudyModule'\r\n    'SeriesModule'\r\n    'ImageModule'\r\n              \r\n  Example:\r\n    data = examination.GetAcquisitionDataFromDicom()\r\n    data['EquipmentModule']['Manufacturer']           // Type: \r\n  String, DICOM tag: (0008,0070)\r\n    data['EquipmentModule']['InstitutionName']        // Type: \r\n  String, DICOM tag: (0008,0080)\r\n    data['EquipmentModule']['DeviceSerialNumber']     // Type: \r\n  String, DICOM tag: (0018,1000)\r\n    data['EquipmentModule']['StationName']            // Type: \r\n  String, DICOM tag: (0008,1010)\r\n    data['EquipmentModule']['ManufacturersModelName'] // Type: \r\n  String, DICOM tag: (0008,1090)\r\n              \r\n    data['StudyModule']['StudyDescription']           // Type: \r\n  String, DICOM tag: (0008,1030)\r\n    data['StudyModule']['StudyInstanceUID']           // Type: \r\n  String, DICOM tag: (0020,000D)\r\n    data['StudyModule']['StudyID']                    // Type: \r\n  String, DICOM tag: (0020,0010)\r\n    data['StudyModule']['StudyDateTime']              // Type: \r\n  DateTime, DICOM tag: (0008,0020) and (0008,0030)\r\n    data['StudyModule']['AccessionNumber']            // Type: Int, \r\n  DICOM tag: (0008,0050)\r\n                                                      \r\n    data['SeriesModule']['SeriesDescription']         // Type: \r\n  String, DICOM tag:(0008,103E)\r\n    data['SeriesModule']['SeriesInstanceUID']         // Type: \r\n  String, DICOM tag:(0020,000E)\r\n    data['SeriesModule']['ProtocolName']              // Type: \r\n  String, DICOM tag: (0018,1030)\r\n    data['SeriesModule']['SeriesDateTime']            // Type: \r\n  DateTime, DICOM tag: (0008,0021) and (0008,0031)\r\n                                                      \r\n    data['ImageModule']['AcquisitionNumber']          // Type: Int, \r\n  DICOM tag: (0020,0012)\r\n    data['ImageModule']['AcquisitionDateTime']        // Type: \r\n  DateTime, DICOM tag: (0008,0022) and (0008,0032) (note that the \r\n  earliest time among the slices is returned)\r\n    data['ImageModule']['ContentDateTime']            // Type: \r\n  DateTime, DICOM tag: (0008,0023) and (0008,0033) (note that the \r\n  earliest time among the slices is returned)\r\n", "params": [], "type": "function"}, "SetTreatmentPositionAlignmentRegistration": {"description": "SetTreatmentPositionAlignmentRegistration(..)\r\n  Action that sets treatment position alignment registration for a \r\n  CBCT image to the planning image for the treatment delivery plan.\r\n  The CBCT image will be aligned with respect to the beam isocenter \r\n  of the beams for the current fraction. \r\n  Treatment adaptation has to be initialized.\r\n              \r\n  Example 1, Manually entered isocenter, Setup correction included \r\n  in CBCT isocenter:\r\n  case.Examinations['CBCT \r\n  4'].SetTreatmentPositionAlignmentRegistration(ManualTPAlignment=True, SetupCorrectionIncludedInCbctIsocenter=True, IsocenterReference=\"Intrinsic\", IntrinsicIsocenter={ 'x': -22.44, 'y': -22.44, 'z': -0.17 }, TreatmentPlanForDelivery=plan) \r\n  \r\n              \r\n  Example 2, Isocenter from treatment plan, Manually entered couch \r\n  setup:\r\n  case.Examinations['CBCT \r\n  4'].SetTreatmentPositionAlignmentRegistration(ManualTPAlignment=True, SetupCorrectionIncludedInCbctIsocenter=False, CouchRotationAngle=358, CouchRotationAxis={ 'x': 0, 'y': -1, 'z': 0 }, CouchTranslation={ 'x': 1, 'y': -1.5, 'z': 0.5 }, IsocenterReference=\"RtPlan\", TreatmentPlanForDelivery=plan)\r\n  \r\n              \r\n  Example 3, Varian OBI imaging system with marker match POIs:\r\n  case.Examinations['CBCT \r\n  4'].SetTreatmentPositionAlignmentRegistration(ManualTPAlignment=False, SetupCorrectionIncludedInCbctIsocenter=False, CouchRotationAngle=0, CouchRotationAxis={ 'x': 0, 'y': -1, 'z': 0 }, CouchTranslation={ 'x': 0.15, 'y': 0.16, 'z': -0.16 }, IsocenterReference=\"Intrinsic\", IntrinsicIsocenter={ 'x': -23.42, 'y': -24.21, 'z': 0.1 }, TreatmentPlanForDelivery=plan)\r\n  \r\n  Intrisic isocenter is the position of the Aquisition isocenter POI \r\n  on the CBCT.\r\n  The couch translation is calculated as the Aquisition isocenter \r\n  POI - Initial match isocenter POI on the CBCT.\r\n  Parameters:\r\n    ManualTPAlignment - Defines if the treatment position \r\n      alignment information is given manually. (In opposite to if \r\n      marker match POIs is used, supported only by Varian OBI)\r\n    SetupCorrectionIncludedInCbctIsocenter - Defines if setup \r\n      correction is included in cbct isocenter information or not. \r\n      If not, couch rotation angle, couch rotation axis and couch \r\n      translation need to be defined.\r\n      Otherwise, those parameters should be set to null\r\n    CouchRotationAngle - Setup correction: couch rotation \r\n      angle [deg]\r\n    CouchRotationAxis - Setup correction: couch rotation axis \r\n      (in DICOM coordinates). Needs to be of length one. \r\n      Default from UI is rotation around Post-Ant direction, i.e., \r\n      {'x': 0, 'y': -1, 'z': 0} when used from scripting (dicom \r\n      coordinates)\r\n    CouchTranslation - Setup correction: couch translation [cm].\r\n    IsocenterReference - How the coordinate system of the CBCT \r\n      image is defined. Possible values:\r\n      'Intrinsic'  : Coordinate system for which the isocenter point \r\n      used during patient setup has the coordinates of the \r\n      IntrinsicIsocenter\r\n      'RtPlan'     : Coordinate system for which the isocenter point \r\n      used during patient setup has the coordinates as in the \r\n      corresponding plan, i.e., the image is pre-aligned with the \r\n      frame-of-reference used in the plan\r\n    IntrinsicIsocenter - Coordinate corresponding to the \r\n      isocenter of the CBCT image [cm]\r\n      Required if 'IsocenterReference' is 'Intrinsic'. \r\n      In case 'IsocenterReference' is 'RtPlan', 'IntrinsicIsocenter' \r\n      will be set to the (shared) beam isocenter for the radiation \r\n      set used for the current fraction.\r\n    TreatmentPlanForDelivery - Plan used for treatment delivery\r\n", "params": ["ManualTPAlignment", "SetupCorrectionIncludedInCbctIsocenter", "CouchRotationAngle", "CouchRotationAxis", "CouchTranslation", "IsocenterReference", "IntrinsicIsocenter", "TreatmentPlanForDelivery"], "type": "function"}, "__RayStation_ID": "-2147383293, 'CT 1'", "DeleteExamination": {"description": "DeleteExamination()\r\n  Action for deleting an examination.\r\n", "params": [], "type": "function"}, "LaserExportReferencePoint": null, "GetExaminationDateTime": {"description": "GetExaminationDateTime()\r\n  Gets the acquisition time of the associated DICOM data.\r\n              \r\n  It gives the first found of the following properties: \r\n  AcquisitionDateTime, \r\n  minimum ContentDateTime among slices, SeriesDateTime, \r\n  StudyDateTime or null otherwise.\r\n  Returns:\r\n    The acquisition date and time of images.\r\n", "params": [], "type": "function"}, "PostSetupCorrection": null, "Name": "CT 1", "GetProtocolName": {"description": "GetProtocolName()\r\n  Gets the DICOM tag Protocol Name (0018,1030).\r\n  Returns:\r\n    Protocol Name.\r\n", "params": [], "type": "function"}, "CreateTransformedExamination": {"description": "CreateTransformedExamination(..)\r\n  Method for creating a rigidly transformed examination from an \r\n  existing.\r\n              \r\n  This method is for experimental use - use with care.\r\n  Parameters:\r\n    ExaminationName - Name given to the transformed examination\r\n    YawRotation - Rotation angle in yaw direction (around \r\n      ant-post)\r\n    PitchRotation - Rotation angle in pitch direction (around \r\n      left-right)\r\n    RollRotation - Rotation angle in roll direction (around \r\n      sup-inf)\r\n    Translation - Translation (in patient coordinate system: \r\n      r-l, i-s, p-a)\r\n    FrameOfReference - Frame-of-reference for the transformed \r\n      examination. If empty string is given the Frame-Of-Reference \r\n      will be set to the same as for the original examination\r\n  Returns:\r\n    \r\n", "params": ["ExaminationName", "YawRotation", "PitchRotation", "RollRotation", "Translation", "FrameOfReference"], "type": "function"}, "WriteStoredDicomDataSetToFileForVerification": {"description": "WriteStoredDicomDataSetToFileForVerification(..)\r\n  Write the stored dicom data for the current examination to a \r\n  text file.\r\n              \r\n  One image slice is used to collect the requested information.\r\n  Hence, for tags with different values in different slices (SOP \r\n  Instance UID, Content time, Image Position etc), only one value \r\n  will be reported.\r\n              \r\n  One level of dicom sequence tags is handled. This means that, \r\n  e.g., for PET images not all the stored tags are exported.\r\n  Parameters:\r\n    FileName - Name of the file\r\n", "params": ["FileName"], "type": "function"}, "Time": 0, "GetDensityThresholdsForCbctImage": {"description": "GetDensityThresholdsForCbctImage()\r\n  Computes automatically the thresholds needed for creating a CT \r\n  to density table for CBCT using the 'auto' option. \r\n  The thresholds will be the same as when the 'auto' option is used \r\n  in the \"Create Density Table for CBCT\" dialog. \r\n  The thresholds can be used as in parameter to \r\n  SetCtToDensityTableForCbctImageAction.\r\n  Example:\r\n    densityThresholds = cbct.GetDensityThresholdsForCbctImage()\r\n  Returns:\r\n    Returns a dictionary with threshold names and corresponding \r\n    CBCT values.\r\n", "params": [], "type": "function"}, "GetStoredDicomTagValueForVerification": {"description": "GetStoredDicomTagValueForVerification(..)\r\n  Get the stored dicom tag value for verification. Tag is given as \r\n  group and element in hexadecimal format, \r\n  i.e., Group=0x0008, Element=0x0008 will give back attribute \"Image \r\n  Type\"\r\n              \r\n  Dicom sequence tags are currently not supported.\r\n              \r\n  One image slice is used to collect the requested information.\r\n  Hence, for tags with different values in different slices (SOP \r\n  Instance UID, Content time, Image Position etc), only one value \r\n  will be reported.\r\n  Parameters:\r\n    Group - Group (hexadecimal)\r\n    Element - Element (hexadecimal)\r\n  Returns:\r\n    Dictionary with description and value (as a string)\r\n", "params": ["Group", "Element"], "type": "function"}, "Series": [{"LevelWindow": {"y": 750.0, "x": 100.0}, "__RayStation_ID": "-2147383291", "ImageStack": {"Thumbnail": {"__RayStation_ID": "-2147383288", "Size": {"y": 76, "x": 150}, "PixelSize": {"y": 0.39078947368421052, "x": 0.25800000000000001}}, "GetPixelValues": {"description": "GetPixelValues()\r\n  Gets the pixel values of the image stack.\r\n  Returns:\r\n    \r\n", "params": [], "type": "function"}, "ColumnDirection": {"y": 1.0, "x": 0.0, "z": 0.0}, "MinStoredValue": 24, "ImportedDicomSliceUIDs": "", "PetConversionParameters": null, "__RayStation_ID": "-2147383290", "GetResampledPETValues": {"description": "GetResampledPETValues(..)\r\n  Gets the PET data of the image stack resampled on a dose grid.\r\n  Parameters:\r\n    DoseGrid - The dose grid used for the resampling.\r\n    Scaling - The PET scaling. Allowed values are \"Activity\" \r\n      and \"SUVBW\".\r\n  Returns:\r\n    \r\n", "params": ["DoseGrid", "Scaling"], "type": "function"}, "NrPixels": {"y": 198, "x": 387}, "GetImageStackHistogram": {"description": "GetImageStackHistogram(..)\r\n  Computes an histogram over image intensities, either over the \r\n  whole image or inside an ROI.\r\n  Note that the ROI relative volumes are not accounted for.\r\n  Parameters:\r\n    BinSize - Size of the bins. If BinSize is set to zero, \r\n      will generate a histogram with around 300 bins.\r\n    ExcludePixelPadding - If true, pixel padding voxel will be \r\n      excluded from the histogram\r\n    RoiName - Name of ROI which to compute the histogram \r\n      inside. If left empty, the whole image will be used\r\n    ConvertCbctValueToHu - For CBCT image, apply CBCT values \r\n      to HU transformation before computing histogram. Note that a \r\n      CBCT values to density table needs to be specified.\r\n  Returns:\r\n    A sorted dictionary with bin id (i.e., a short) and its nr \r\n    of entries\r\n", "params": ["BinSize", "ExcludePixelPadding", "RoiName", "ConvertCbctValueToHu"], "type": "function"}, "MaxStoredValue": 2024, "Corner": {"y": -12.26527, "x": -19.28705, "z": -49.4625}, "GetIntensityStatistics": {"description": "GetIntensityStatistics(..)\r\n  Computes statistics for the intensities inside an ROI. The \r\n  result is returned as a dictionary with statistics type \r\n  (\"Average\", \"Min\", \"Max\") value and unit.\r\n              \r\n  From python script the values are accessible e.g., through:\r\n  statistics = \r\n  case.Examinations[0].Series[0].ImageStack.GetIntensityStatistics(RoiName=\"\")\r\n  \r\n  average = statistics[\"Average\"]\r\n  for pair in average:\r\n    print str(pair.Key) + \" \" + str(pair.Value)\r\n  Parameters:\r\n    RoiName - Name of ROI which to compute the statistics \r\n      inside. If left empty, the outline ROI will be used.\r\n  Returns:\r\n    The ROI statistic.\r\n", "params": ["RoiName"], "type": "function"}, "SlicePositions": [0.0, 0.1875, 0.375, 0.5625, 0.75, 0.9375, 1.125, 1.3125, 1.5, 1.6875, 1.875, 2.0625, 2.25, 2.4375, 2.625, 2.8125, 3.0, 3.1875, 3.375, 3.5625, 3.75, 3.9375, 4.125, 4.3125, 4.5, 4.6875, 4.875, 5.0625, 5.25, 5.4375, 5.625, 5.8125, 6.0, 6.1875, 6.375, 6.5625, 6.75, 6.9375, 7.125, 7.3125, 7.5, 7.6875, 7.875, 8.0625, 8.25, 8.4375, 8.625, 8.8125, 9.0, 9.1875, 9.375, 9.5625, 9.75, 9.9375, 10.125, 10.3125, 10.5, 10.6875, 10.875, 11.0625, 11.25, 11.4375, 11.625, 11.8125, 12.0, 12.1875, 12.375, 12.5625, 12.75, 12.9375, 13.125, 13.3125, 13.5, 13.6875, 13.875, 14.0625, 14.25, 14.4375, 14.625, 14.8125, 15.0, 15.1875, 15.375, 15.5625, 15.75, 15.9375, 16.125, 16.3125, 16.5, 16.6875, 16.875, 17.0625, 17.25, 17.4375, 17.625, 17.8125, 18.0, 18.1875, 18.375, 18.5625, 18.75, 18.9375, 19.125, 19.3125, 19.5, 19.6875, 19.875, 20.0625, 20.25, 20.4375, 20.625, 20.8125, 21.0, 21.1875, 21.375, 21.5625, 21.75, 21.9375, 22.125, 22.3125, 22.5, 22.6875, 22.875, 23.0625, 23.25, 23.4375, 23.625, 23.8125, 24.0, 24.1875, 24.375, 24.5625, 24.75, 24.9375, 25.125, 25.3125, 25.5, 25.6875, 25.875, 26.0625, 26.25, 26.4375, 26.625, 26.8125, 27.0, 27.1875, 27.375, 27.5625, 27.75, 27.9375, 28.125, 28.3125, 28.5, 28.6875, 28.875, 29.0625, 29.25, 29.4375, 29.625, 29.8125, 30.0, 30.1875, 30.375, 30.5625, 30.75, 30.9375, 31.125, 31.3125, 31.5, 31.6875, 31.875, 32.0625, 32.25, 32.4375, 32.625, 32.8125, 33.0, 33.1875, 33.375, 33.5625, 33.75, 33.9375, 34.125, 34.3125, 34.5, 34.6875, 34.875, 35.0625, 35.25, 35.4375, 35.625, 35.8125, 36.0, 36.1875, 36.375, 36.5625, 36.75, 36.9375, 37.125, 37.3125], "RowDirection": {"y": 0.0, "x": 1.0, "z": 0.0}, "SliceDirection": {"y": -0.0, "x": -0.0, "z": 1.0}, "ConversionParameters": {"RescaleIntercept": -1024.0, "RescaleSlope": 1.0, "HighBit": 15, "__RayStation_ID": "-2147383289", "PixelPaddingRange": null, "PixelRepresentation": 0, "BitsStored": 16, "IsDataClean": true}, "GetBoundingBox": {"description": "GetBoundingBox()\r\n  Gets the bounding box of the image stack.\r\n  Returns:\r\n    The bounding box of the image stack as an array of points \r\n    corresponding to min corner and max corner (in DICOM coordinates).\r\n", "params": [], "type": "function"}, "GetResampledAndScaledPixelData": {"description": "GetResampledAndScaledPixelData(..)\r\n  Gets the pixel data of the image stack resampled on a dose grid \r\n  and scales the data according to \r\n  the Reference and LookUp lists.\r\n  Parameters:\r\n    DoseGrid - The dose grid used for resampling.\r\n    Reference - The list of reference values for scaling.\r\n    LookUp - The list of look up values for scaling.\r\n  Returns:\r\n    \r\n", "params": ["DoseGrid", "Reference", "LookUp"], "type": "function"}, "GetResampledPixelData": {"description": "GetResampledPixelData(..)\r\n  Gets the pixel data of the image stack resampled on a dose grid.\r\n  Parameters:\r\n    DoseGrid - The dose grid used for the resampling.\r\n  Returns:\r\n    \r\n", "params": ["DoseGrid"], "type": "function"}, "PixelSize": {"y": 0.14999999999999999, "x": 0.10000000000000001}}, "ImportedDicomUID": "2.25.113671411085692411884826793208422723857", "OriginalPatientID": "PLASTIC"}], "GetDicomMRSequenceData": {"description": "GetDicomMRSequenceData()\r\n  This method is for experimental use - use with care.\r\n  Returns:\r\n    A dictionary MR sequence specific data.\r\n", "params": [], "type": "function"}}, "OutlineBodyOnCBCT": {"description": "OutlineBodyOnCBCT(..)\r\n  Creates geometry for the External ROI for a limited \r\n  field-of-view CBCT examination.\r\n  Parameters:\r\n    ModelExaminationName - The name of the examination that \r\n      will be used as the model. Typically, the planning CT.\r\n      The External ROI must have geometry defined for this \r\n      examination.\r\n    ThresholdLevel - The threshold level used to guide an MBS \r\n      mesh based on the geometry of the External ROI for the \r\n      model examination. This value should be chosen such that \r\n      larger values correspond to \r\n      anatomy in the CBCT examination.\r\n    FieldOfViewRoiName - The name of the field-of-view ROI \r\n      geometry. This ROI defines the region in which\r\n      MBS adaptation is performed for the MBS mesh based on the \r\n      external geometry in the model\r\n      examination.\r\n    ExternalMbsRoiName - The name of the external MBS ROI.\r\n    SupInfRange - The sup/inf range used when creating the \r\n      model (in cm).\r\n      Should be given in CBCT coordinates.\r\n      If (0,0) is given, the whole external on the model examination \r\n      will be used.\r\n", "params": ["ModelExaminationName", "ThresholdLevel", "FieldOfViewRoiName", "ExternalMbsRoiName", "SupInfRange"], "type": "function"}, "SetRoiGeometryRepresentationToTriangleMesh": {"description": "SetRoiGeometryRepresentationToTriangleMesh(..)\r\n  Set the ROI geometry to a triangle mesh.\r\n  This method is for experimental use - use with care.\r\n  Parameters:\r\n    ROI - Name of the ROI that the triangle mesh shall be \r\n      assigned to.\r\n    Indices - Array with triangle mesh indices.\r\n    Vertices - Array with triangle mesh vertices.\r\n", "params": ["ROI", "Indices", "Vertices"], "type": "function"}, "ComparisonOfRoiGeometries": {"description": "ComparisonOfRoiGeometries(..)\r\n   Computes overlap measures between two geometries for comparison.\r\n   \r\n   Dice similarity coefficient/index - DSC (also called Dice's \r\n  coefficient or Sorensen index): \r\n             2 | ROIA intersect ROIB | / | ROIA | + | ROIB |\r\n   DSC range between 0 (no overlap) and 1 (complete overlap)\r\n   DSC with reference to:\r\n   Dice, \"Measures of the amount of ecologic association between \r\n  species\", Ecology 26:297\u2013302 (1945)\r\n              \r\n   Precision:\r\n            | ROIA intersect ROIB | / | ROIA union ROIB |\r\n   Precision range between 0 (no overlap) and 1 (complete overlap)\r\n   Precision with reference to:\r\n   Udupa et al, \"A framework for evaluating image segmentation \r\n  algorithms\", Computerized Medical Imaging and Graphics, \r\n  30(2):75-87 (2006)\r\n              \r\n   Specificity:\r\n            1 - | ROIB not ROIA | / | ROIA |\r\n   Specificity is 1 for a complete overlap, and otherwise less than 1\r\n   Delineation specificity with reference to:\r\n   Udupa et al, \"A framework for evaluating image segmentation \r\n  algorithms\", Computerized Medical Imaging and Graphics, \r\n  30(2):75-87 (2006)\r\n              \r\n   Sensitivity:\r\n            | ROIA intersect ROIB | / | ROIA |\r\n   Sensitivity range between 0 (no overlap) and 1 (complete overlap)\r\n   Delineation sensitivity with reference to:\r\n   Udupa et al, \"A framework for evaluating image segmentation \r\n  algorithms\", Computerized Medical Imaging and Graphics, \r\n  30(2):75-87 (2006)\r\n              \r\n   Mean distance to agreement (Mean DTA):\r\n   Average distance for the surface of ROIA intersect ROIB to the \r\n  surface of ROIA union ROIB\r\n   Measured using a distance transform based approach. Each point \r\n  (/voxel) on the surface of the target roi will be assigned the \r\n  minimum distance to a point (/voxel) on the surface of the \r\n  reference roi. \r\n   Mean DTA is 0 for complete overlap. If no overlap, infinity is \r\n  assigned.\r\n   Unit is cm.\r\n   Note: If the Mean DTA has not been computed there will be no \r\n  corresponding entry in the return value.\r\n              \r\n   Max distance to agreement (Max DTA):\r\n   Maximum distance for the surface of ROIA intersect ROIB to the \r\n  surface of ROIA union ROIB\r\n   Measured using a distance transform based approach. Each point \r\n  (/voxel) on the surface of the target roi will be assigned the \r\n  minimum distance to a point (/voxel) on the surface of the \r\n  reference roi. \r\n   Max DTA is 0 for complete overlap. If no overlap, infinity is \r\n  assigned.\r\n   Unit is cm.\r\n   Note: If the Max DTA has not been computed there will be no \r\n  corresponding entry in the return value.\r\n  Parameters:\r\n    RoiA - The name of the ROI geometry A.\r\n    RoiB - The name of the ROI geometry B.\r\n    ComputeDistanceToAgreementMeasures - Determines if Mean \r\n      DTA and Max DTA are computed (computation time will increase).\r\n      If set to false, Mean DTA and Max DTA will not have \r\n      corresponding key/value entries in the return value.\r\n", "params": ["RoiA", "RoiB", "ComputeDistanceToAgreementMeasures"], "type": "function"}, "SimplifyContours": {"description": "SimplifyContours(..)\r\n  Action for simplifying contours.\r\n  Parameters:\r\n    RoiNames - List of ROI names.\r\n    RemoveHoles3D - Remove holes in 3D.\r\n    RemoveSmallContours - Remove small contours.\r\n    AreaThreshold - Area threshold [cm^2].\r\n    ReduceMaxNumberOfPointsInContours - Reduce the number of \r\n      points in contours.\r\n    MaxNumberOfPoints - Max number of points.\r\n    CreateCopyOfRoi - Create copy of ROI.\r\n", "params": ["RoiNames", "RemoveHoles3D", "RemoveSmallContours", "AreaThreshold", "ReduceMaxNumberOfPointsInContours", "MaxNumberOfPoints", "CreateCopyOfRoi"], "type": "function"}, "__RayStation_ID": "-2147383248, 'CT 1'", "ApprovedStructureSets": [{"ApprovedRoiStructures": [{"GetCenterOfRoi": {"description": "GetCenterOfRoi()\r\n  Gets the ROI center of mass.\r\n  Returns:\r\n    The center-of-mass of the ROI in DICOM coordinates.\r\n", "params": [], "type": "function"}, "GetRoiVolume": {"description": "GetRoiVolume()\r\n  Gets the ROI volume.\r\n  Returns:\r\n    Gets the ROI volume in cm^3.\r\n", "params": [], "type": "function"}, "GetCoordinateForMaxGrayLevel": {"description": "GetCoordinateForMaxGrayLevel(..) \r\n  --> No documentation found.\r\n", "params": [], "type": "function"}, "ExportRoiGeometryAsMetaImage": {"description": "ExportRoiGeometryAsMetaImage(..)\r\n  Export a roi geometry (using its voxel representation) as meta \r\n  image file (http://www.itk.org/Wiki/ITK/MetaIO/Documentation).\r\n  It is possible to select to get the region out in a format (image \r\n  size, voxel size) corresponding the examination it is defined on.\r\n  As the voxel representation is used voxels in the exported image \r\n  will have values between 0 and 255, \r\n  where 0 correspond to voxels outside the roi geometry, 255 to \r\n  voxels completely inside the roi geometry, and 1 - 254 to voxels \r\n  on the boundary of the roi geometry, describing the relative \r\n  belongingness to the roi geometry.\r\n              \r\n  Note that meta image file uses mm as unit. Hence \r\n  Offset/Position/Origin and ElementSize/ElementSpacing should be \r\n  given in mm.\r\n  Parameters:\r\n    MetaFileName - File name\r\n    AsExamination - If true, the number of voxels, voxel size \r\n      and image corner will be the same as the examination the \r\n      roigeometry is defined on\r\n", "params": ["MetaFileName", "AsExamination"], "type": "function"}, "GetBoundingBox": {"description": "GetBoundingBox()\r\n  Gets the bounding box of the ROI geometry.\r\n  Returns:\r\n    The bounding box of the ROI geometry as an array of points \r\n    corresponding to min corner and max corner (in DICOM coordinates).\r\n", "params": [], "type": "function"}, "SetRepresentation": {"description": "SetRepresentation(..)\r\n  Primary shape of the roi geometry will (if necessary) be changed \r\n  to the selected representation. Representation can be:\r\n  - Contours\r\n  - Voxels\r\n  - Triangle mesh\r\n  When changing the primary shape, a conversion between shapes is \r\n  done which can cause a small loss of data. \r\n  For more information on the conversion algorithms used and its \r\n  implications, please see RayStation Reference Manual chapter \r\n  Volume handling.\r\n              \r\n  Remark that a geometry cannot be converted to a MBS mesh using \r\n  this method. This can be done from the UI using the Create MBS \r\n  ROI(s) functionality, selecting \"ROI based on contour ROI geometry\"\r\n  Parameters:\r\n    Representation - Name of the Representation\r\n", "params": ["Representation"], "type": "function"}, "DeleteGeometry": {"description": "DeleteGeometry()\r\n  Deletes the geometry of a RoiGeometry.\r\n", "params": [], "type": "function"}, "ExportRoiGeometryAsMetaImageWithSpecifiedGridSettings": {"description": "ExportRoiGeometryAsMetaImageWithSpecifiedGridSettings(..)\r\n   Export a roi geometry (using its voxel representation) as meta \r\n  image file (http://www.itk.org/Wiki/ITK/MetaIO/Documentation).\r\n   Dimensions are given by parameters VoxelSize, Corner and \r\n  NumberOfVoxels. \r\n   Note that the grid settings need to be such that the bounding box \r\n  of the geometry is covered.\r\n              \r\n   As the voxel representation is used voxels in the exported image \r\n  will have values between 0 and 255, \r\n   where 0 correspond to voxels outside the roi geometry, 255 to \r\n  voxels completely inside the roi geometry, and 1 - 254 to voxels \r\n  on the boundary of the roi geometry, describing the relative \r\n  belongingness to the roi geometry.\r\n   \r\n   Note that meta image file uses mm as unit. Hence \r\n  Offset/Position/Origin and ElementSize/ElementSpacing is given in \r\n  mm.\r\n  Parameters:\r\n    MetaFileName - File name\r\n    VoxelSize - Voxel size in the exported image\r\n    Corner - Corner for the exported image\r\n    NumberOfVoxels - Number of voxels in the exported image\r\n", "params": ["MetaFileName", "VoxelSize", "Corner", "NumberOfVoxels"], "type": "function"}, "__RayStation_ID": "-2147383247, 'Bone'", "PrimaryShape": {"DerivedRoiStatus": null, "__RayStation_ID": "-2147383246", "LineType": "PolyLine", "IsClosed": true}, "HasContours": {"description": "HasContours()\r\n  Returns true if PrimaryShape has contours.\r\n  Returns:\r\n    True or False depending on if RoiGeometry.PrimaryShape \r\n    contains contours.\r\n", "params": [], "type": "function"}, "DicomImportHistory": null, "GetDependentRois": {"description": "GetDependentRois()\r\n  Gets the name of all ROIs included in the derived ROI expression.\r\n  Returns:\r\n    List with ROI names\r\n", "params": [], "type": "function"}, "OfRoi": {"__RayStation_ID": "-2147383274, 'Bone'", "id_reference": true}}], "ModificationInfo": {"ModificationTime": "", "SoftwareVersion": "5.99.0.16", "UserName": "ICR\\hmuessemann", "__RayStation_ID": "-2147176137", "DicomUID": "1.2.752.243.1.1.20170725135008869.4000.22145", "ImportedDicomUID": ""}, "ApprovedPoiStructures": [{"Point": {"y": -1.5402699999999996, "x": 0.86295000000000499, "z": -28.65}, "__RayStation_ID": "-2147241214, 'loc'", "OfPoi": {"__RayStation_ID": "-2147241215, 'loc'", "id_reference": true}, "DicomImportHistory": null, "IsPatientMarkingIsocenterPoint": false, "Volume": 0.0}], "__RayStation_ID": "-2147176139", "Review": {"ApprovalStatus": "Approved", "ReviewTime": "", "__RayStation_ID": "-2147176138", "HasBeenExported": false, "ReviewerName": "ICR\\dmcquaid"}}], "AdaptMeshToGeometryAndStoreAsNewRoi": {"description": "AdaptMeshToGeometryAndStoreAsNewRoi(..)\r\n  Utility method for gold atlas data (part of gentle radiotherapy \r\n  project).\r\n  A geometry which is a triangle mesh (\"ModelGeometry\") is adapted \r\n  to another geometry of any shape (RoiGeometry). \r\n  The adapted triangle mesh is stored as a geometry for a ROI which \r\n  is created by the method (NewRoi).\r\n  Parameters:\r\n    ModelGeometry - Name of RoiGeometry (which has \r\n      representation Triangle Mesh) to use as model\r\n    RoiGeometry - Name of RoiGeometry to which the model \r\n      should be adapted\r\n    NewRoi - Name of RoiGeometry where to store the adapted \r\n      triangle mesh\r\n", "params": ["ModelGeometry", "RoiGeometry", "NewRoi"], "type": "function"}, "LocalizationPoiGeometry": {"__RayStation_ID": "-2147241214, 'loc'", "id_reference": true}}], "UpdateDerivedGeometries": {"description": "UpdateDerivedGeometries(..)\r\n  Updates the derived geometry for the specified examination.\r\n  Parameters:\r\n    RoiNames - The ROIs to update.\r\n    Examination - The target examination.\r\n    Algorithm - Defines if the logical set operations use \r\n      contour or voxel based methods. \r\n      Margins (expand/contract) and Wall operations are always \r\n      performed using voxel based methods.\r\n                  \r\n      Possible values:\r\n      * Auto: Automatically select algorithm mode.\r\n      * Contours: Use contour based methods.\r\n      * Voxels: Use voxel based methods.\r\n      Default value is \"Auto\".\r\n    AreEmptyDependenciesAllowed - If empty dependencies are \r\n      not allowed the resulting derived status will be set to 'Needs \r\n      update'\r\n      if any of the geometries that an ROI depends on are empty.\r\n", "params": ["RoiNames", "Examination", "Algorithm", "AreEmptyDependenciesAllowed"], "type": "function"}}
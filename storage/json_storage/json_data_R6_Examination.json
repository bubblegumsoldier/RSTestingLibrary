{"AssignToNewFrameOfReference": {"description": "AssignToNewFrameOfReference()\r\n  Method for assigning a new frame-of-reference to the examination. \r\n              \r\n  Stored dicom data will be updated with the new Frame of Reference \r\n  UID (0020, 0052), new SOP Instance UIDs (0008, 0018) and a new \r\n  Series Instance UIDs (0020, 000E). \r\n  The modified tags will be used if the examination is exported.\r\n              \r\n  Note that if the method is used on an examination which is in the \r\n  same frame-of-reference as another examination or is in the same \r\n  frame-of-reference as the to or from frame-of-reference in a \r\n  FrameOfReferenceRegistration, \r\n  methods demanding that examinations are in the same \r\n  frame-of-reference (or has a frame-of-reference registration \r\n  defined), such as create deformable registraion or compute dose on \r\n  additional set,\r\n  can not be used until a new frame-of-reference registration \r\n  between the examinations has been created.\r\n  Can only be used if the examination:\r\n  - has not been used to create a frame-of-reference registration\r\n  - is not referenced in a structure registration (i.e., added rigid \r\n  transform or deformable registration), \r\n  - is not part of an examination group,\r\n  - is not referenced by a treatment plan, or\r\n  - does not have computed doses\r\n              \r\n  Patient will be closed and reopened in order to initalize views \r\n  correctly given the new frame-of-reference\r\n", "params": [], "type": "function"}, "EquipmentInfo": {"SetDensityComputationParameters": {"description": "SetDensityComputationParameters(..) \r\n  --> No documentation found.\r\n", "params": [], "type": "function"}, "SetImagingSystemReference": {"description": "SetImagingSystemReference(..)\r\n  Action that sets ImagingSystemReference for the EquipmentInfo of \r\n  an Examination. \r\n  If the examination belongs to an 4DCT group, all examinations in \r\n  the group will be assigned the selected ImagingSystem.\r\n  Only commissioned, nondepricated ImagingSystems can be used.\r\n  If the selected ImagingSystem is a CBCT machine, Modality will be \r\n  updated to 'CBCT'.\r\n  Parameters:\r\n    ImagingSystemName - The name of the ImagingSystem\r\n      Note: if left empty ImagingSystem will be assigned 'None'. If \r\n      changing from a CBCT machine, Modality will be updated to 'CT'\r\n", "params": ["ImagingSystemName"], "type": "function"}, "SetCtToDensityTableForCbctImage": {"description": "SetCtToDensityTableForCbctImage(..)\r\n  Action that sets CtToDensityTable for a CBCT image. In parameter \r\n  is an array with five short ints that correspond to the density \r\n  thresholds between:\r\n    Air to Lung\r\n    Lung to Adipose\r\n    Adipose to Tissue\r\n    Tissue to Cartilage/Bone\r\n    Cartilage/Bone to Other\r\n  Values within the threshold ranges will be mapped to the following \r\n  densities:\r\n    Materials.Air             0.00121\r\n    Materials.Lung            0.26\r\n    Materials.Adipose         0.95\r\n    Materials.Tissue          1.05\r\n    Materials.CartilageBone   1.6\r\n    Materials.Other           3.0\r\n  Parameters:\r\n    DensityThresholds -  Density thresholds (in CBCT values) \r\n      used to create the CT to density table\r\n", "params": ["DensityThresholds"], "type": "function"}, "FrameOfReference": "2.25.113671410927236086855132530142775996689", "ImageSpecificDensityComputationParameters": null, "Modality": "CT", "CopyCtToDensityTableFromAnotherCbctImage": {"description": "CopyCtToDensityTableFromAnotherCbctImage(..)\r\n  Reuses the CT to density table from another CBCT image. \r\n  Typically this is done in the dose tracking use case. The CT to \r\n  density table is created for the first fraction image and then \r\n  used for all other fraction images.\r\n  Parameters:\r\n    FromExaminationName -  Name of the examination from which \r\n      to copy the CT to density table\r\n", "params": ["FromExaminationName"], "type": "function"}, "__RayStation_ID": "-2147383292", "CbctSettings": null, "SetImageSpecificCtToDensityTable": {"description": "SetImageSpecificCtToDensityTable(..)\r\n  Action that sets an image specific CT to density table for an \r\n  Examination.\r\n  Currently it can only be used for CT images.\r\n  Parameters:\r\n    HU - Array with CT values [in HU]\r\n    Rho - Array with mass density values [in g/cm^3]\r\n", "params": ["HU", "Rho"], "type": "function"}, "ImagingSystemReference": {"ImagingSystemName": "Generic CT", "CommissioningTime": "<unknown type>"}}, "ImportFraction": 0, "GetAffineTransformationParametersGivenCenterOfRotation": {"description": "GetAffineTransformationParametersGivenCenterOfRotation(..)\r\n  Method for extracting registration parameters in elastix \r\n  AffineTransformation format.\r\n  Parameters:\r\n    TransformationMatrix - \r\n    CenterOfRotation - \r\n", "params": ["TransformationMatrix", "CenterOfRotation"], "type": "function"}, "PatientPosition": "HFS", "ExportExaminationAsMetaImage": {"description": "ExportExaminationAsMetaImage(..)\r\n  Export examination as a meta image file \r\n  (http://www.itk.org/Wiki/ITK/MetaIO/Documentation).\r\n              \r\n  ObjectType              = Image\r\n  NDims                   = 3\r\n  BinaryData              = True\r\n  BinaryDataByteOrderMSB  = False\r\n  CompressedData          = False\r\n  Offset                  = corner center in x, corner center in y, \r\n  corner center in z\r\n  ElementSpacing          = voxel size in x, voxel size in y, voxel \r\n  size in z\r\n  DimSize                 = number of voxels in x, number of voxels \r\n  in y, number of voxels in z\r\n  ElementNumberOfChannels = 1\r\n  ElementType             = MET_SHORT\r\n  ElementDataFile         = MetaFileName\r\n  Note that meta image file uses mm as unit. Hence Offset and \r\n  ElementSpacing will be exported in mm.\r\n  This method is for experimental use - use with care.\r\n  Parameters:\r\n    MetaFileName - File name\r\n", "params": ["MetaFileName"], "type": "function"}, "CropImageStackAndStoreAsNewExamination": {"description": "CropImageStackAndStoreAsNewExamination(..)\r\n  Crops an image stack based on the bounding box described by \r\n  parameters MinCorner and MaxCorner. \r\n  The cropped image stack is stored as a new examination, in the \r\n  same frame-of-reference and with the same voxel size as the \r\n  original.\r\n              \r\n  This method is for experimental use - use with care.\r\n  Parameters:\r\n    MinCorner - Min corner of bounding box\r\n    MaxCorner - Max corner of bounding box\r\n  Returns:\r\n    \r\n", "params": ["MinCorner", "MaxCorner"], "type": "function"}, "GetCtToDensityTableForCbctImage": {"description": "GetCtToDensityTableForCbctImage()\r\n  Computes automatically the thresholds needed for creating a CT \r\n  to density table for CBCT and creates the corresponding CT to \r\n  density table. \r\n  The CT to density table will be the same as when the 'auto' option \r\n  is used in the \"Create Density Table for CBCT\" dialog.\r\n  Example:\r\n    [huArray, rhoArray] = cbct.GetCtToDensityTableForCbctImage()\r\n  Returns:\r\n    Returns a list with two arrays. The first array contains the \r\n    HU values [Hounsfield units] and the second array the densities \r\n    [g/cm^3].\r\n", "params": [], "type": "function"}, "GetAcquisitionDataFromDicom": {"description": "GetAcquisitionDataFromDicom()\r\n  Gets acquisition related DICOM tags for the given examination.\r\n  The return value is a dictionary consisting of four modules:\r\n    'EquipmentModule'\r\n    'StudyModule'\r\n    'SeriesModule'\r\n    'ImageModule'\r\n              \r\n  Example:\r\n    data = examination.GetAcquisitionDataFromDicom()\r\n    data['EquipmentModule']['Manufacturer']           // Type: \r\n  String, DICOM tag: (0008,0070)\r\n    data['EquipmentModule']['InstitutionName']        // Type: \r\n  String, DICOM tag: (0008,0080)\r\n    data['EquipmentModule']['DeviceSerialNumber']     // Type: \r\n  String, DICOM tag: (0018,1000)\r\n    data['EquipmentModule']['StationName']            // Type: \r\n  String, DICOM tag: (0008,1010)\r\n    data['EquipmentModule']['ManufacturersModelName'] // Type: \r\n  String, DICOM tag: (0008,1090)\r\n              \r\n    data['StudyModule']['StudyDescription']           // Type: \r\n  String, DICOM tag: (0008,1030)\r\n    data['StudyModule']['StudyInstanceUID']           // Type: \r\n  String, DICOM tag: (0020,000D)\r\n    data['StudyModule']['StudyID']                    // Type: \r\n  String, DICOM tag: (0020,0010)\r\n    data['StudyModule']['StudyDateTime']              // Type: \r\n  DateTime, DICOM tag: (0008,0020) and (0008,0030)\r\n    data['StudyModule']['AccessionNumber']            // Type: Int, \r\n  DICOM tag: (0008,0050)\r\n                                                      \r\n    data['SeriesModule']['SeriesDescription']         // Type: \r\n  String, DICOM tag:(0008,103E)\r\n    data['SeriesModule']['SeriesInstanceUID']         // Type: \r\n  String, DICOM tag:(0020,000E)\r\n    data['SeriesModule']['ProtocolName']              // Type: \r\n  String, DICOM tag: (0018,1030)\r\n    data['SeriesModule']['SeriesDateTime']            // Type: \r\n  DateTime, DICOM tag: (0008,0021) and (0008,0031)\r\n                                                      \r\n    data['ImageModule']['AcquisitionNumber']          // Type: Int, \r\n  DICOM tag: (0020,0012)\r\n    data['ImageModule']['AcquisitionDateTime']        // Type: \r\n  DateTime, DICOM tag: (0008,0022) and (0008,0032) (note that the \r\n  earliest time among the slices is returned)\r\n    data['ImageModule']['ContentDateTime']            // Type: \r\n  DateTime, DICOM tag: (0008,0023) and (0008,0033) (note that the \r\n  earliest time among the slices is returned)\r\n", "params": [], "type": "function"}, "SetTreatmentPositionAlignmentRegistration": {"description": "SetTreatmentPositionAlignmentRegistration(..)\r\n  Action that sets treatment position alignment registration for a \r\n  CBCT image to the planning image for the treatment delivery plan.\r\n  The CBCT image will be aligned with respect to the beam isocenter \r\n  of the beams for the current fraction. \r\n  Treatment adaptation has to be initialized.\r\n              \r\n  Example 1, Manually entered isocenter, Setup correction included \r\n  in CBCT isocenter:\r\n  case.Examinations['CBCT \r\n  4'].SetTreatmentPositionAlignmentRegistration(ManualTPAlignment=True, SetupCorrectionIncludedInCbctIsocenter=True, IsocenterReference=\"Intrinsic\", IntrinsicIsocenter={ 'x': -22.44, 'y': -22.44, 'z': -0.17 }, TreatmentPlanForDelivery=plan) \r\n  \r\n              \r\n  Example 2, Isocenter from treatment plan, Manually entered couch \r\n  setup:\r\n  case.Examinations['CBCT \r\n  4'].SetTreatmentPositionAlignmentRegistration(ManualTPAlignment=True, SetupCorrectionIncludedInCbctIsocenter=False, CouchRotationAngle=358, CouchRotationAxis={ 'x': 0, 'y': -1, 'z': 0 }, CouchTranslation={ 'x': 1, 'y': -1.5, 'z': 0.5 }, IsocenterReference=\"RtPlan\", TreatmentPlanForDelivery=plan)\r\n  \r\n              \r\n  Example 3, Varian OBI imaging system with marker match POIs:\r\n  case.Examinations['CBCT \r\n  4'].SetTreatmentPositionAlignmentRegistration(ManualTPAlignment=False, SetupCorrectionIncludedInCbctIsocenter=False, CouchRotationAngle=0, CouchRotationAxis={ 'x': 0, 'y': -1, 'z': 0 }, CouchTranslation={ 'x': 0.15, 'y': 0.16, 'z': -0.16 }, IsocenterReference=\"Intrinsic\", IntrinsicIsocenter={ 'x': -23.42, 'y': -24.21, 'z': 0.1 }, TreatmentPlanForDelivery=plan)\r\n  \r\n  Intrisic isocenter is the position of the Aquisition isocenter POI \r\n  on the CBCT.\r\n  The couch translation is calculated as the Aquisition isocenter \r\n  POI - Initial match isocenter POI on the CBCT.\r\n  Parameters:\r\n    ManualTPAlignment - Defines if the treatment position \r\n      alignment information is given manually. (In opposite to if \r\n      marker match POIs is used, supported only by Varian OBI)\r\n    SetupCorrectionIncludedInCbctIsocenter - Defines if setup \r\n      correction is included in cbct isocenter information or not. \r\n      If not, couch rotation angle, couch rotation axis and couch \r\n      translation need to be defined.\r\n      Otherwise, those parameters should be set to null\r\n    CouchRotationAngle - Setup correction: couch rotation \r\n      angle [deg]\r\n    CouchRotationAxis - Setup correction: couch rotation axis \r\n      (in DICOM coordinates). Needs to be of length one. \r\n      Default from UI is rotation around Post-Ant direction, i.e., \r\n      {'x': 0, 'y': -1, 'z': 0} when used from scripting (dicom \r\n      coordinates)\r\n    CouchTranslation - Setup correction: couch translation [cm].\r\n    IsocenterReference - How the coordinate system of the CBCT \r\n      image is defined. Possible values:\r\n      'Intrinsic'  : Coordinate system for which the isocenter point \r\n      used during patient setup has the coordinates of the \r\n      IntrinsicIsocenter\r\n      'RtPlan'     : Coordinate system for which the isocenter point \r\n      used during patient setup has the coordinates as in the \r\n      corresponding plan, i.e., the image is pre-aligned with the \r\n      frame-of-reference used in the plan\r\n    IntrinsicIsocenter - Coordinate corresponding to the \r\n      isocenter of the CBCT image [cm]\r\n      Required if 'IsocenterReference' is 'Intrinsic'. \r\n      In case 'IsocenterReference' is 'RtPlan', 'IntrinsicIsocenter' \r\n      will be set to the (shared) beam isocenter for the radiation \r\n      set used for the current fraction.\r\n    TreatmentPlanForDelivery - Plan used for treatment delivery\r\n", "params": ["ManualTPAlignment", "SetupCorrectionIncludedInCbctIsocenter", "CouchRotationAngle", "CouchRotationAxis", "CouchTranslation", "IsocenterReference", "IntrinsicIsocenter", "TreatmentPlanForDelivery"], "type": "function"}, "__RayStation_ID": "-2147383293, 'CT 1'", "DeleteExamination": {"description": "DeleteExamination()\r\n  Action for deleting an examination.\r\n", "params": [], "type": "function"}, "LaserExportReferencePoint": null, "GetExaminationDateTime": {"description": "GetExaminationDateTime()\r\n  Gets the acquisition time of the associated DICOM data.\r\n              \r\n  It gives the first found of the following properties: \r\n  AcquisitionDateTime, \r\n  minimum ContentDateTime among slices, SeriesDateTime, \r\n  StudyDateTime or null otherwise.\r\n  Returns:\r\n    The acquisition date and time of images.\r\n", "params": [], "type": "function"}, "PostSetupCorrection": null, "Name": "CT 1", "GetProtocolName": {"description": "GetProtocolName()\r\n  Gets the DICOM tag Protocol Name (0018,1030).\r\n  Returns:\r\n    Protocol Name.\r\n", "params": [], "type": "function"}, "CreateTransformedExamination": {"description": "CreateTransformedExamination(..)\r\n  Method for creating a rigidly transformed examination from an \r\n  existing.\r\n              \r\n  This method is for experimental use - use with care.\r\n  Parameters:\r\n    ExaminationName - Name given to the transformed examination\r\n    YawRotation - Rotation angle in yaw direction (around \r\n      ant-post)\r\n    PitchRotation - Rotation angle in pitch direction (around \r\n      left-right)\r\n    RollRotation - Rotation angle in roll direction (around \r\n      sup-inf)\r\n    Translation - Translation (in patient coordinate system: \r\n      r-l, i-s, p-a)\r\n    FrameOfReference - Frame-of-reference for the transformed \r\n      examination. If empty string is given the Frame-Of-Reference \r\n      will be set to the same as for the original examination\r\n  Returns:\r\n    \r\n", "params": ["ExaminationName", "YawRotation", "PitchRotation", "RollRotation", "Translation", "FrameOfReference"], "type": "function"}, "WriteStoredDicomDataSetToFileForVerification": {"description": "WriteStoredDicomDataSetToFileForVerification(..)\r\n  Write the stored dicom data for the current examination to a \r\n  text file.\r\n              \r\n  One image slice is used to collect the requested information.\r\n  Hence, for tags with different values in different slices (SOP \r\n  Instance UID, Content time, Image Position etc), only one value \r\n  will be reported.\r\n              \r\n  One level of dicom sequence tags is handled. This means that, \r\n  e.g., for PET images not all the stored tags are exported.\r\n  Parameters:\r\n    FileName - Name of the file\r\n", "params": ["FileName"], "type": "function"}, "Time": 0, "GetDensityThresholdsForCbctImage": {"description": "GetDensityThresholdsForCbctImage()\r\n  Computes automatically the thresholds needed for creating a CT \r\n  to density table for CBCT using the 'auto' option. \r\n  The thresholds will be the same as when the 'auto' option is used \r\n  in the \"Create Density Table for CBCT\" dialog. \r\n  The thresholds can be used as in parameter to \r\n  SetCtToDensityTableForCbctImageAction.\r\n  Example:\r\n    densityThresholds = cbct.GetDensityThresholdsForCbctImage()\r\n  Returns:\r\n    Returns a dictionary with threshold names and corresponding \r\n    CBCT values.\r\n", "params": [], "type": "function"}, "GetStoredDicomTagValueForVerification": {"description": "GetStoredDicomTagValueForVerification(..)\r\n  Get the stored dicom tag value for verification. Tag is given as \r\n  group and element in hexadecimal format, \r\n  i.e., Group=0x0008, Element=0x0008 will give back attribute \"Image \r\n  Type\"\r\n              \r\n  Dicom sequence tags are currently not supported.\r\n              \r\n  One image slice is used to collect the requested information.\r\n  Hence, for tags with different values in different slices (SOP \r\n  Instance UID, Content time, Image Position etc), only one value \r\n  will be reported.\r\n  Parameters:\r\n    Group - Group (hexadecimal)\r\n    Element - Element (hexadecimal)\r\n  Returns:\r\n    Dictionary with description and value (as a string)\r\n", "params": ["Group", "Element"], "type": "function"}, "Series": [{"LevelWindow": {"y": 750.0, "x": 100.0}, "__RayStation_ID": "-2147383291", "ImageStack": {"Thumbnail": {"__RayStation_ID": "-2147383288", "Size": {"y": 76, "x": 150}, "PixelSize": {"y": 0.39078947368421052, "x": 0.25800000000000001}}, "GetPixelValues": {"description": "GetPixelValues()\r\n  Gets the pixel values of the image stack.\r\n  Returns:\r\n    \r\n", "params": [], "type": "function"}, "ColumnDirection": {"y": 1.0, "x": 0.0, "z": 0.0}, "MinStoredValue": 24, "ImportedDicomSliceUIDs": "<unknown type>", "PetConversionParameters": null, "__RayStation_ID": "-2147383290", "GetResampledPETValues": {"description": "GetResampledPETValues(..)\r\n  Gets the PET data of the image stack resampled on a dose grid.\r\n  Parameters:\r\n    DoseGrid - The dose grid used for the resampling.\r\n    Scaling - The PET scaling. Allowed values are \"Activity\" \r\n      and \"SUVBW\".\r\n  Returns:\r\n    \r\n", "params": ["DoseGrid", "Scaling"], "type": "function"}, "NrPixels": {"y": 198, "x": 387}, "GetImageStackHistogram": {"description": "GetImageStackHistogram(..)\r\n  Computes an histogram over image intensities, either over the \r\n  whole image or inside an ROI.\r\n  Note that the ROI relative volumes are not accounted for.\r\n  Parameters:\r\n    BinSize - Size of the bins. If BinSize is set to zero, \r\n      will generate a histogram with around 300 bins.\r\n    ExcludePixelPadding - If true, pixel padding voxel will be \r\n      excluded from the histogram\r\n    RoiName - Name of ROI which to compute the histogram \r\n      inside. If left empty, the whole image will be used\r\n    ConvertCbctValueToHu - For CBCT image, apply CBCT values \r\n      to HU transformation before computing histogram. Note that a \r\n      CBCT values to density table needs to be specified.\r\n  Returns:\r\n    A sorted dictionary with bin id (i.e., a short) and its nr \r\n    of entries\r\n", "params": ["BinSize", "ExcludePixelPadding", "RoiName", "ConvertCbctValueToHu"], "type": "function"}, "MaxStoredValue": 2024, "Corner": {"y": -12.26527, "x": -19.28705, "z": -49.4625}, "GetIntensityStatistics": {"description": "GetIntensityStatistics(..)\r\n  Computes statistics for the intensities inside an ROI. The \r\n  result is returned as a dictionary with statistics type \r\n  (\"Average\", \"Min\", \"Max\") value and unit.\r\n              \r\n  From python script the values are accessible e.g., through:\r\n  statistics = \r\n  case.Examinations[0].Series[0].ImageStack.GetIntensityStatistics(RoiName=\"\")\r\n  \r\n  average = statistics[\"Average\"]\r\n  for pair in average:\r\n    print str(pair.Key) + \" \" + str(pair.Value)\r\n  Parameters:\r\n    RoiName - Name of ROI which to compute the statistics \r\n      inside. If left empty, the outline ROI will be used.\r\n  Returns:\r\n    The ROI statistic.\r\n", "params": ["RoiName"], "type": "function"}, "SlicePositions": [0.0, 0.1875, 0.375, 0.5625, 0.75, 0.9375, 1.125, 1.3125, 1.5, 1.6875, 1.875, 2.0625, 2.25, 2.4375, 2.625, 2.8125, 3.0, 3.1875, 3.375, 3.5625, 3.75, 3.9375, 4.125, 4.3125, 4.5, 4.6875, 4.875, 5.0625, 5.25, 5.4375, 5.625, 5.8125, 6.0, 6.1875, 6.375, 6.5625, 6.75, 6.9375, 7.125, 7.3125, 7.5, 7.6875, 7.875, 8.0625, 8.25, 8.4375, 8.625, 8.8125, 9.0, 9.1875, 9.375, 9.5625, 9.75, 9.9375, 10.125, 10.3125, 10.5, 10.6875, 10.875, 11.0625, 11.25, 11.4375, 11.625, 11.8125, 12.0, 12.1875, 12.375, 12.5625, 12.75, 12.9375, 13.125, 13.3125, 13.5, 13.6875, 13.875, 14.0625, 14.25, 14.4375, 14.625, 14.8125, 15.0, 15.1875, 15.375, 15.5625, 15.75, 15.9375, 16.125, 16.3125, 16.5, 16.6875, 16.875, 17.0625, 17.25, 17.4375, 17.625, 17.8125, 18.0, 18.1875, 18.375, 18.5625, 18.75, 18.9375, 19.125, 19.3125, 19.5, 19.6875, 19.875, 20.0625, 20.25, 20.4375, 20.625, 20.8125, 21.0, 21.1875, 21.375, 21.5625, 21.75, 21.9375, 22.125, 22.3125, 22.5, 22.6875, 22.875, 23.0625, 23.25, 23.4375, 23.625, 23.8125, 24.0, 24.1875, 24.375, 24.5625, 24.75, 24.9375, 25.125, 25.3125, 25.5, 25.6875, 25.875, 26.0625, 26.25, 26.4375, 26.625, 26.8125, 27.0, 27.1875, 27.375, 27.5625, 27.75, 27.9375, 28.125, 28.3125, 28.5, 28.6875, 28.875, 29.0625, 29.25, 29.4375, 29.625, 29.8125, 30.0, 30.1875, 30.375, 30.5625, 30.75, 30.9375, 31.125, 31.3125, 31.5, 31.6875, 31.875, 32.0625, 32.25, 32.4375, 32.625, 32.8125, 33.0, 33.1875, 33.375, 33.5625, 33.75, 33.9375, 34.125, 34.3125, 34.5, 34.6875, 34.875, 35.0625, 35.25, 35.4375, 35.625, 35.8125, 36.0, 36.1875, 36.375, 36.5625, 36.75, 36.9375, 37.125, 37.3125], "RowDirection": {"y": 0.0, "x": 1.0, "z": 0.0}, "SliceDirection": {"y": -0.0, "x": -0.0, "z": 1.0}, "ConversionParameters": {"RescaleIntercept": -1024.0, "RescaleSlope": 1.0, "HighBit": 15, "__RayStation_ID": "-2147383289", "PixelPaddingRange": null, "PixelRepresentation": 0, "BitsStored": 16, "IsDataClean": true}, "GetBoundingBox": {"description": "GetBoundingBox()\r\n  Gets the bounding box of the image stack.\r\n  Returns:\r\n    The bounding box of the image stack as an array of points \r\n    corresponding to min corner and max corner (in DICOM coordinates).\r\n", "params": [], "type": "function"}, "GetResampledAndScaledPixelData": {"description": "GetResampledAndScaledPixelData(..)\r\n  Gets the pixel data of the image stack resampled on a dose grid \r\n  and scales the data according to \r\n  the Reference and LookUp lists.\r\n  Parameters:\r\n    DoseGrid - The dose grid used for resampling.\r\n    Reference - The list of reference values for scaling.\r\n    LookUp - The list of look up values for scaling.\r\n  Returns:\r\n    \r\n", "params": ["DoseGrid", "Reference", "LookUp"], "type": "function"}, "GetResampledPixelData": {"description": "GetResampledPixelData(..)\r\n  Gets the pixel data of the image stack resampled on a dose grid.\r\n  Parameters:\r\n    DoseGrid - The dose grid used for the resampling.\r\n  Returns:\r\n    \r\n", "params": ["DoseGrid"], "type": "function"}, "PixelSize": {"y": 0.14999999999999999, "x": 0.10000000000000001}}, "ImportedDicomUID": "2.25.113671411085692411884826793208422723857", "OriginalPatientID": "PLASTIC"}], "GetDicomMRSequenceData": {"description": "GetDicomMRSequenceData()\r\n  This method is for experimental use - use with care.\r\n  Returns:\r\n    A dictionary MR sequence specific data.\r\n", "params": [], "type": "function"}}